{"version":3,"sources":["Components/Board/Contexts/TasksContext.js","Components/Board/Components/Task.js","Components/Board/Components/Taskbar.js","Components/Board/Board.js","data/tasksData.js","config/taskbarConfig.js","utils/fakeServer.util.js","Components/Board/index.js","index.js"],"names":["TasksContext","createContext","tasks","setTasks","Task","props","className","draggable","onDragStart","event","taskId","dataTransfer","setData","id","summary","assignee","project","src","img","alt","Taskbar","onDragOver","preventDefault","onDrop","getData","updatedTasks","context","map","task","status","Consumer","key","React","Component","contextType","Board","taskbar","item","columnStatus","tasksData","taskbarConfig","fakeServerUtil","this","Promise","resolve","setTimeout","BoardContainer","newTasks","setState","state","updateTasks","updateTaskbar","getTasksData","getTaskbarConfig","newTaskbar","Provider","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.256dbb95.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nexport const TasksContext = createContext({\r\n    tasks: [],\r\n    setTasks: () => { }\r\n});","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../css/Task.css';\r\n\r\nconst Task = (props) => {\r\n    const onDragStart = (event, taskId) => {\r\n        event.dataTransfer.setData('taskId', taskId);\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"task\"\r\n            draggable=\"true\"\r\n            onDragStart={(event) => onDragStart(event, props.id)}\r\n        >\r\n            <ul className=\"list\">\r\n                <li>{props.id}</li>\r\n                <li>{props.summary}</li>\r\n                <li>{props.assignee}</li>\r\n                <li>\r\n                    <div className=\"item-status-div\">\r\n                        <p>{props.project}</p>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <img\r\n                        className=\"image\"\r\n                        src={props.img}\r\n                        alt=''\r\n                    />\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nTask.propTypes = {\r\n    id: PropTypes.string,\r\n    summary: PropTypes.string,\r\n    assignee: PropTypes.string,\r\n    project: PropTypes.string,\r\n    img: PropTypes.string\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { TasksContext } from '../Contexts/TasksContext';\r\nimport Task from './Task';\r\nimport '../css/Taskbar.css';\r\n\r\nclass Taskbar extends React.Component {\r\n    static contextType = TasksContext;\r\n\r\n    onDragOver = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    onDrop = (event) => {\r\n        const id = event.dataTransfer.getData('taskId');\r\n        const updatedTasks = this.context.tasks.map(task => {\r\n            if (task.id === id) {\r\n                task.status = this.props.status;\r\n                return task\r\n            } else return task\r\n        });\r\n        this.context.setTasks(updatedTasks);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <TasksContext.Consumer>\r\n                {(context) => (\r\n                    <div className=\"taskbar\">\r\n                        <div className=\"taskbar-title\">\r\n                            <p>{this.props.status}</p>\r\n                        </div>\r\n                        <div\r\n                            className=\"taskbar-list\"\r\n                            onDragOver={this.onDragOver}\r\n                            onDrop={this.onDrop}\r\n                        >\r\n                            {context.tasks.map((task) => {\r\n                                if (task.status === this.props.status) {\r\n                                    return (\r\n                                        <Task\r\n                                            key={task.id}\r\n                                            id={task.id}\r\n                                            summary={task.summary}\r\n                                            assignee={task.assignee}\r\n                                            status={task.status}\r\n                                            project={task.project}\r\n                                            img={task.img}\r\n                                        />\r\n                                    )\r\n                                }\r\n                            })}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </TasksContext.Consumer>\r\n        );\r\n    }\r\n}\r\n\r\nTaskbar.propTypes = {\r\n    status: PropTypes.string\r\n}\r\n\r\nexport default Taskbar;","import React from 'react';\r\nimport { TasksContext } from './Contexts/TasksContext';\r\nimport Taskbar from './Components/Taskbar';\r\nimport './css/Board.css';\r\n\r\nconst Board = () => {\r\n    return (\r\n        <TasksContext.Consumer>\r\n            {(context) => (\r\n                <div className=\"board\">\r\n                    <div className=\"board-taskbar-container\">\r\n                        {context.taskbar.map((item) => {\r\n                            return (\r\n                                <Taskbar\r\n                                    key={item.columnStatus}\r\n                                    status={item.columnStatus}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TasksContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default Board;","export const tasksData = [\r\n    {\r\n        id: 'MJ-1',\r\n        summary: 'Learn React',\r\n        assignee: 'None',\r\n        status: 'To Do',\r\n        project: 'Education',\r\n        img: 'https://image.flaticon.com/icons/svg/2731/2731461.svg'\r\n    },\r\n    {\r\n        id: 'MJ-2',\r\n        summary: 'Learn Redux',\r\n        assignee: 'Konstantin',\r\n        status: 'To Do',\r\n        project: 'Education',\r\n        img: 'https://image.flaticon.com/icons/svg/2714/2714068.svg'\r\n    },\r\n    {\r\n        id: 'MJ-3',\r\n        summary: 'Log time',\r\n        assignee: 'Diana',\r\n        status: 'To Do',\r\n        project: 'Routine',\r\n        img: 'https://image.flaticon.com/icons/svg/145/145852.svg'\r\n    },\r\n    {\r\n        id: 'MJ-4',\r\n        summary: 'Create mini-jira',\r\n        assignee: 'Artem',\r\n        status: 'To Do',\r\n        project: 'Education',\r\n        img: 'https://image.flaticon.com/icons/svg/145/145843.svg'\r\n    },\r\n    {\r\n        id: 'MJ-5',\r\n        summary: 'Feed the cat',\r\n        assignee: 'Julia',\r\n        status: 'To Do',\r\n        project: 'Ungreatful tasks',\r\n        img: 'https://image.flaticon.com/icons/svg/2741/2741163.svg'\r\n    },\r\n    {\r\n        id: 'MJ-6',\r\n        summary: 'Play games',\r\n        assignee: 'Eugene',\r\n        status: 'To Do',\r\n        project: 'Recreation',\r\n        img: 'https://image.flaticon.com/icons/svg/2741/2741111.svg'\r\n    },\r\n    {\r\n        id: 'MJ-7',\r\n        summary: 'Do sport',\r\n        assignee: 'Lera',\r\n        status: 'To Do',\r\n        project: 'Health',\r\n        img: 'https://image.flaticon.com/icons/svg/163/163802.svg'\r\n    },\r\n    {\r\n        id: 'MJ-8',\r\n        summary: 'Cook',\r\n        assignee: 'Yuri',\r\n        status: 'To Do',\r\n        project: 'Routine',\r\n        img: 'https://image.flaticon.com/icons/svg/163/163804.svg'\r\n    }\r\n];","export const taskbarConfig = [\r\n    {\r\n        columnStatus: \"To Do\"\r\n    },\r\n    {\r\n        columnStatus: \"In Progress\"\r\n    },\r\n    {\r\n        columnStatus: \"Ready for testing\"\r\n    },\r\n    {\r\n        columnStatus: \"Completed\"\r\n    }\r\n]","import { tasksData } from '../data/tasksData';\r\nimport { taskbarConfig } from '../config/taskbarConfig';\r\n\r\nclass FakeServerUtil {\r\n    constructor() {\r\n        this.tasksData = tasksData;\r\n        this.taskbarConfig = taskbarConfig;\r\n    }\r\n\r\n    // In order to emulate request/response\r\n    async getTasksData() {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                resolve(this.tasksData);\r\n            }, 2500);\r\n        })\r\n    }\r\n\r\n    // In order to emulate request/response\r\n    async getTaskbarConfig() {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                resolve(this.taskbarConfig);\r\n            }, 1500);\r\n        })\r\n    }\r\n}\r\n\r\nexport const fakeServerUtil = new FakeServerUtil();\r\n","import React from 'react';\r\nimport Board from './Board';\r\nimport PropTypes from 'prop-types';\r\nimport { TasksContext } from './Contexts/TasksContext';\r\nimport { fakeServerUtil } from '../../utils/fakeServer.util';\r\n\r\nexport default class BoardContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            taskbar: [],\r\n            // [start] Reserved names by TasksContext\r\n            tasks: [],\r\n            updateTasks: this.updateTasks,\r\n            setTasks: this.setTasks\r\n            // [end] Reserved names by TasksContext\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateTasks();\r\n        this.updateTaskbar();\r\n    }\r\n\r\n    // Async tasks fetch \r\n    async updateTasks() {\r\n        const newTasks = await fakeServerUtil.getTasksData();\r\n        this.setState({ tasks: newTasks });\r\n    }\r\n\r\n    setTasks = (newTasks) => {\r\n        this.setState({ tasks: newTasks });\r\n    }\r\n\r\n    // Async columns fetch \r\n    async updateTaskbar() {\r\n        const newTaskbar = await fakeServerUtil.getTaskbarConfig();\r\n        this.setState({ taskbar: newTaskbar });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <TasksContext.Provider value={this.state}>\r\n                <Board />\r\n            </TasksContext.Provider>\r\n        )\r\n    }\r\n}\r\n\r\nBoardContainer.propTypes = {\r\n    taskbar: PropTypes.array,\r\n    tasks: PropTypes.array,\r\n    updateTasks: PropTypes.func,\r\n    setTasks: PropTypes.func\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport BoardContainer from './Components/Board/index';\n\nReactDOM.render(\n  <BoardContainer />,\n  document.getElementById('root')\n);"],"sourceRoot":""}