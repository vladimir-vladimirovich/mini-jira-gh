{"version":3,"sources":["components/Board/components/Task/Task.js","components/Board/components/Task/index.js","components/Board/components/Taskbar/Taskbar.js","components/Board/components/Taskbar/actions.js","components/Board/components/Taskbar/selectors.js","components/Board/components/Taskbar/index.js","components/Board/components/Filters/Filters.js","utils/redux.util.js","components/Board/components/Filters/selectors.js","components/Board/actions.js","data/tasksData.js","config/taskbar.js","config/filters.js","utils/fakeServer.util.js","components/Board/components/Filters/index.js","components/Board/Board.js","components/Board/selectors.js","components/Board/index.js","components/Board/reducers/taskbar.js","components/Board/reducers/tasks.js","components/Board/reducers/filters.js","components/Board/reducers/index.js","index.js"],"names":["Task","props","id","summary","assignee","project","img","onDragStart","className","draggable","src","alt","TaskContainer","event","dataTransfer","setData","this","React","Component","Taskbar","status","onDragOver","onDrop","tasksData","map","task","key","updateTask","properties","type","payload","getTasks","createSelector","state","tasksReducer","filter","tasks","TaskbarContainer","preventDefault","dispatch","taskId","getData","actions","enhance","connect","selectors","FiltersPanel","filters","applyFilter","onClick","name","createDeepEqualSelector","createSelectorCreator","defaultMemoize","_","getFilters","reduxUtil","filtersReducer","updateTaskbar","taskbarData","updateTasksAll","taskbarConfig","columnName","filtersConfig","fakeServerUtil","Promise","resolve","setTimeout","FiltersContainer","filterOptions","find","item","target","getTasksData","then","updatedTasks","Board","columnNames","getColumnNames","taskbarReducer","taskbarItem","BoardContainer","updateTasks","updateFilters","getTaskbarConfig","getFiltersConfig","filtersData","paylaod","compose","action","produce","draftState","Object","assign","defaultState","boardReducers","combineReducers","boardStore","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.88e78913.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../../css/Task.css';\r\n\r\nconst Task = (props) => {\r\n    const { id, summary, assignee, project, img, onDragStart } = props;\r\n    \r\n    return (\r\n        <div\r\n            className=\"task\"\r\n            draggable=\"true\"\r\n            onDragStart={onDragStart}\r\n        >\r\n            <ul className=\"list\">\r\n                <li>{id}</li>\r\n                <li>{summary}</li>\r\n                <li>{assignee}</li>\r\n                <li>\r\n                    <div className=\"item-status-div\">\r\n                        <p>{project}</p>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <img\r\n                        className=\"image\"\r\n                        src={img}\r\n                        alt=''\r\n                    />\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nTask.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    assignee: PropTypes.string.isRequired,\r\n    project: PropTypes.string.isRequired,\r\n    img: PropTypes.string,\r\n    onDragStart: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Task from './Task';\r\n\r\nclass TaskContainer extends React.Component {\r\n    onDragStart = (event) => {\r\n        event.dataTransfer.setData('taskId', this.props.id);\r\n    }\r\n\r\n    render() {\r\n        const { id, summary, assignee, project, img } = this.props;\r\n        \r\n        return (\r\n            <Task\r\n                id={id}\r\n                summary={summary}\r\n                assignee={assignee}\r\n                project={project}\r\n                img={img}\r\n                onDragStart={this.onDragStart}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nTaskContainer.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    assignee: PropTypes.string.isRequired,\r\n    project: PropTypes.string.isRequired,\r\n    img: PropTypes.string\r\n}\r\n\r\nexport default TaskContainer;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TaskContainer from '../Task/index';\r\nimport '../../css/Taskbar.css';\r\n\r\nconst Taskbar = (props) => {\r\n    const { status, onDragOver, onDrop, tasksData } = props;\r\n\r\n    return (\r\n        <div className=\"taskbar\">\r\n            <div className=\"taskbar-title\">\r\n                <p>{status}</p>\r\n            </div>\r\n            <div\r\n                className=\"taskbar-list\"\r\n                onDragOver={onDragOver}\r\n                onDrop={onDrop}\r\n            >\r\n                {\r\n                    tasksData\r\n                        .map(task => (\r\n                            <TaskContainer\r\n                                key={task.id}\r\n                                id={task.id}\r\n                                summary={task.summary}\r\n                                assignee={task.assignee}\r\n                                status={task.status}\r\n                                project={task.project}\r\n                                img={task.img}\r\n                            />))\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nTaskbar.propTypes = {\r\n    status: PropTypes.string.isRequired,\r\n    onDragOver: PropTypes.func.isRequired,\r\n    onDrop: PropTypes.func.isRequired,\r\n    tasksData: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Taskbar;","/**\r\n * Update single object item in array\r\n * @param {Object} properties \r\n */\r\nexport const updateTask = (properties) => {\r\n    return {\r\n        type: 'TASKS:UPDATE_ITEM',\r\n        payload: {\r\n            ...properties\r\n        }\r\n    };\r\n}","import { createSelector } from 'reselect';\r\n\r\nconst getTasksMemo = (state, props) => {\r\n    return state.tasksReducer.filter(task => task.status === props.status);\r\n}\r\n\r\nexport const getTasks = createSelector(\r\n    [getTasksMemo],\r\n    (tasks) => tasks\r\n);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Taskbar from './Taskbar';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from './actions';\r\nimport * as selectors from './selectors';\r\nimport '../../css/Taskbar.css';\r\n\r\nclass TaskbarContainer extends React.Component {\r\n    onDragOver = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    onDrop = (event) => {\r\n        const { status, dispatch } = this.props;\r\n        const taskId = event.dataTransfer.getData('taskId');\r\n\r\n        dispatch(actions.updateTask({ id: taskId, status: status }));\r\n    };\r\n\r\n    render() {\r\n        const { status, tasks } = this.props;\r\n\r\n        return (\r\n            <Taskbar\r\n                onDragOver={this.onDragOver}\r\n                onDrop={this.onDrop}\r\n                status={status}\r\n                tasksData={tasks}\r\n            />);\r\n    }\r\n}\r\n\r\nTaskbarContainer.propTypes = {\r\n    dispatch: PropTypes.func,\r\n    tasks: PropTypes.array.isRequired,\r\n    status: PropTypes.string.isRequired\r\n}\r\n\r\nconst enhance = connect(\r\n    (state, props) => ({\r\n        tasks: selectors.getTasks(state, props)\r\n    })\r\n);\r\n\r\nexport default enhance(TaskbarContainer);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../../css/Filters.css';\r\n\r\nconst FiltersPanel = (props) => {\r\n    const { filters, applyFilter } = props;\r\n\r\n    return (\r\n        <div className=\"filtersPanel\">\r\n            <dt>\r\n                QUICK FILTERS:\r\n            </dt>\r\n            {\r\n                filters.map((filter) => (\r\n                    <dd key={filter.id}>\r\n                        <button\r\n                            id={filter.id}\r\n                            className=\"filter-button\"\r\n                            onClick={applyFilter}\r\n                        >\r\n                            {filter.name}\r\n                        </button>\r\n                    </dd>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nFiltersPanel.propTypes = {\r\n    filters: PropTypes.array.isRequired\r\n}\r\n\r\nexport default FiltersPanel;","import * as _ from 'underscore';\r\nimport { createSelectorCreator, defaultMemoize } from 'reselect';\r\n\r\nexport const createDeepEqualSelector = createSelectorCreator(\r\n    defaultMemoize,\r\n    _.isEqual\r\n);","import * as reduxUtil from '../../../../utils/redux.util';\r\nimport { createSelector } from 'reselect';\r\n\r\nconst getFiltersMemo = (state) => state.filtersReducer;\r\n// Commit\r\nconst getTasksMemo = (state) => state.tasksReducer;\r\n\r\nexport const getTasks = createSelector(\r\n    [getTasksMemo],\r\n    (tasks) => tasks\r\n);\r\n\r\nexport const getFilters = reduxUtil.createDeepEqualSelector(\r\n    [getFiltersMemo],\r\n    (filters) => filters\r\n)","/**\r\n * Re-write related store\r\n * @param {Array.<Object>} taskbarData \r\n */\r\nexport const updateTaskbar = (taskbarData) => {\r\n    return {\r\n        type: 'TASKBAR:UPDATE_ALL',\r\n        payload: taskbarData\r\n    }\r\n}\r\n\r\n/**\r\n * Re-write related store\r\n * @param {Array.<Object>} tasks \r\n */\r\nexport const updateTasksAll = (tasks) => {\r\n    return {\r\n        type: 'TASKS:UPDATE_ALL',\r\n        payload: tasks\r\n    }\r\n}\r\n\r\n/**\r\n * Re-write related store\r\n * @param {Array.<Object>} filters \r\n */\r\nexport const updateFilters = (filters) => {\r\n    return {\r\n        type: 'FILTERS:UPDATE',\r\n        paylaod: filters\r\n    }\r\n}","export const tasksData = [\r\n    {\r\n        id: 'MJ-1',\r\n        summary: 'Learn React',\r\n        assignee: 'None',\r\n        status: 'To Do',\r\n        project: 'Education',\r\n        img: 'https://image.flaticon.com/icons/svg/2731/2731461.svg'\r\n    },\r\n    {\r\n        id: 'MJ-2',\r\n        summary: 'Learn Redux',\r\n        assignee: 'Konstantin',\r\n        status: 'To Do',\r\n        project: 'Education',\r\n        img: 'https://image.flaticon.com/icons/svg/2714/2714068.svg'\r\n    },\r\n    {\r\n        id: 'MJ-3',\r\n        summary: 'Log time',\r\n        assignee: 'Diana',\r\n        status: 'To Do',\r\n        project: 'Routine',\r\n        img: 'https://image.flaticon.com/icons/svg/145/145852.svg'\r\n    },\r\n    {\r\n        id: 'MJ-4',\r\n        summary: 'Create mini-jira',\r\n        assignee: 'Artem',\r\n        status: 'To Do',\r\n        project: 'Education',\r\n        img: 'https://image.flaticon.com/icons/svg/145/145843.svg'\r\n    },\r\n    {\r\n        id: 'MJ-5',\r\n        summary: 'Feed the cat',\r\n        assignee: 'Julia',\r\n        status: 'To Do',\r\n        project: 'Ungreatful tasks',\r\n        img: 'https://image.flaticon.com/icons/svg/2741/2741163.svg'\r\n    },\r\n    {\r\n        id: 'MJ-6',\r\n        summary: 'Play games',\r\n        assignee: 'Eugene',\r\n        status: 'To Do',\r\n        project: 'Recreation',\r\n        img: 'https://image.flaticon.com/icons/svg/2741/2741111.svg'\r\n    },\r\n    {\r\n        id: 'MJ-7',\r\n        summary: 'Do sport',\r\n        assignee: 'Lera',\r\n        status: 'To Do',\r\n        project: 'Health',\r\n        img: 'https://image.flaticon.com/icons/svg/163/163802.svg'\r\n    },\r\n    {\r\n        id: 'MJ-8',\r\n        summary: 'Cook',\r\n        assignee: 'Yuri',\r\n        status: 'To Do',\r\n        project: 'Routine',\r\n        img: 'https://image.flaticon.com/icons/svg/163/163804.svg'\r\n    }\r\n];","export const taskbarConfig = [\r\n    {\r\n        columnName: 'To Do'\r\n    },\r\n    {\r\n        columnName: 'In Progress'\r\n    },\r\n    {\r\n        columnName: 'Ready for testing'\r\n    },\r\n    {\r\n        columnName: 'Completed'\r\n    }\r\n]","export const filtersConfig = [\r\n    {\r\n        id: 'all-filter',\r\n        name: 'All',\r\n        project: '',\r\n        assignee: '',\r\n        summary: ''\r\n    },\r\n    {\r\n        id: 'education-filter',\r\n        name: 'Education',\r\n        project: 'Education',\r\n        assignee: '',\r\n        summary: ''\r\n    },\r\n    {\r\n        id: 'routine-filter',\r\n        name: 'Routine',\r\n        project: 'Routine',\r\n        assignee: '',\r\n        summary: ''\r\n    },\r\n    {\r\n        id: 'recreation-filter',\r\n        name: 'Recreation',\r\n        project: 'Recreation',\r\n        assignee: '',\r\n        summary: ''\r\n    }\r\n]","import { tasksData } from '../data/tasksData';\r\nimport { taskbarConfig } from '../config/taskbar';\r\nimport { filtersConfig } from '../config/filters';\r\n\r\n// Class developed in order to emulate async server calls\r\nclass FakeServerUtil {\r\n    constructor() {\r\n        this.tasksData = tasksData;\r\n        this.taskbarConfig = taskbarConfig;\r\n        this.filtersConfig = filtersConfig;\r\n    }\r\n\r\n    async getTasksData() {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                resolve(this.tasksData);\r\n            }, 100);\r\n        })\r\n    }\r\n\r\n    async getTaskbarConfig() {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                resolve(this.taskbarConfig);\r\n            }, 100);\r\n        })\r\n    }\r\n\r\n    async getFiltersConfig() {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                resolve(this.filtersConfig)\r\n            }, 100)\r\n        })\r\n    }\r\n}\r\n\r\nexport const fakeServerUtil = new FakeServerUtil();","import React from 'react';\r\nimport FiltersPanel from './Filters';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport * as selectors from './selectors';\r\n\r\nimport * as actions from '../../actions';\r\nimport { fakeServerUtil } from '../../../../utils/fakeServer.util';\r\n\r\nclass FiltersContainer extends React.Component {\r\n    applyFilter = (event) => {\r\n        event.preventDefault();\r\n\r\n        const { dispatch, filters } = this.props;\r\n        const filterOptions = filters.find((item) => item.id === event.target.id)\r\n\r\n        fakeServerUtil.getTasksData()\r\n            .then((tasksData) => {\r\n                let updatedTasks = tasksData;\r\n        \r\n                if (filterOptions.project) {\r\n                    updatedTasks = updatedTasks.filter((task) => task.project === filterOptions.project);\r\n                }\r\n                if (filterOptions.summary) {\r\n                    updatedTasks = updatedTasks.filter((task) => task.project === filterOptions.summary);\r\n                }\r\n        \r\n                dispatch(actions.updateTasksAll(updatedTasks));        \r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { filters } = this.props;\r\n\r\n        return (\r\n            <FiltersPanel\r\n                filters={filters}\r\n                applyFilter={this.applyFilter}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nFiltersContainer.propTypes = {\r\n    dispatch: PropTypes.func,\r\n    filters: PropTypes.array.isRequired,\r\n    tasks: PropTypes.array.isRequired\r\n}\r\n\r\nconst enhance = connect(\r\n    (state) => ({\r\n        filters: selectors.getFilters(state),\r\n        tasks: selectors.getTasks(state)\r\n    })\r\n);\r\n\r\nexport default enhance(FiltersContainer);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TaskbarContainer from './components/Taskbar/index';\r\nimport './css/Board.css';\r\nimport FiltersContainer from './components/Filters/index';\r\n\r\nconst Board = (props) => {\r\n    const { columnNames} = props;\r\n\r\n    return (\r\n        <div className=\"board\">\r\n            <FiltersContainer />\r\n            <div className=\"board-taskbar-container\">\r\n                {\r\n                    columnNames.map((columnName) => (\r\n                        <TaskbarContainer\r\n                            key={columnName}\r\n                            status={columnName}\r\n                        />))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nBoard.propTypes = {\r\n    columnNames: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Board;","import * as reduxUtil from '../../utils/redux.util';\r\n\r\nconst getColumnNamesMemo = (state) => state.taskbarReducer;\r\n\r\nexport const getColumnNames = reduxUtil.createDeepEqualSelector(\r\n    [getColumnNamesMemo],\r\n    (columnNames) => columnNames.map(\r\n        (taskbarItem) => taskbarItem.columnName)\r\n)","import React from 'react';\r\nimport Board from './Board';\r\nimport PropTypes from 'prop-types';\r\nimport { fakeServerUtil } from '../../utils/fakeServer.util';\r\nimport * as actions from './actions';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport * as selectors from './selectors';\r\n\r\nclass BoardContainer extends React.Component {\r\n    componentDidMount() {\r\n        this.updateTaskbar();\r\n        this.updateTasks();\r\n        this.updateFilters();\r\n    }\r\n\r\n    async updateTaskbar() {\r\n        const { dispatch } = this.props;\r\n        const taskbarData = await fakeServerUtil.getTaskbarConfig();\r\n\r\n        dispatch(actions.updateTaskbar(taskbarData));\r\n    }\r\n\r\n    async updateTasks() {\r\n        const { dispatch } = this.props;\r\n        const tasksData = await fakeServerUtil.getTasksData();\r\n\r\n        dispatch(actions.updateTasksAll(tasksData));\r\n    }\r\n\r\n    async updateFilters() {\r\n        const { dispatch } = this.props;\r\n        const filtersData = await fakeServerUtil.getFiltersConfig();\r\n\r\n        dispatch(actions.updateFilters(filtersData));\r\n    }\r\n\r\n    render() {\r\n        const { columnNames } = this.props;\r\n\r\n        return (\r\n            <Board columnNames={columnNames} />\r\n        )\r\n    }\r\n}\r\n\r\nBoardContainer.propTypes = {\r\n    dispatch: PropTypes.func,\r\n    columnNames: PropTypes.array.isRequired,\r\n}\r\n\r\nconst enhance = compose(\r\n    connect(\r\n        (state) => ({\r\n            columnNames: selectors.getColumnNames(state),\r\n        })\r\n    )\r\n)\r\n\r\nexport default enhance(BoardContainer)","import { produce } from 'immer';\r\n\r\nconst taskbarReducer = (state = [], action) => produce(state, (draftState) => {\r\n    switch (action.type) {\r\n        case 'TASKBAR:UPDATE_ALL':\r\n            return action.payload;\r\n        default:\r\n            return draftState;\r\n    }\r\n})\r\n\r\nexport default taskbarReducer;\r\n","import { produce } from 'immer';\r\n\r\nconst tasksReducer = (state = [], action) => produce(state, (draftState) => {\r\n    switch (action.type) {\r\n        case 'TASKS:UPDATE_ALL':\r\n            return action.payload;\r\n        case 'TASKS:UPDATE_ITEM':\r\n            const task = draftState.find((task) => task.id === action.payload.id);\r\n\r\n            Object.assign(task, action.payload);\r\n            break;\r\n        default:\r\n            return state;\r\n    }\r\n})\r\n\r\nexport default tasksReducer;","import { produce } from 'immer';\r\nimport { filtersConfig } from '../../../config/filters';\r\n\r\nconst defaultState = filtersConfig;\r\n\r\nconst filtersReducer = (state = defaultState, action) => produce(state, (draftState) => {\r\n    switch (action.type) {\r\n        case 'FILTERS:UPDATE':\r\n            return action.payload;\r\n        default:\r\n            return draftState;\r\n    }\r\n})\r\n\r\nexport default filtersReducer;","import { combineReducers } from 'redux';\r\nimport taskbarReducer from './taskbar';\r\nimport tasksReducer from './tasks';\r\nimport filtersReducer from './filters';\r\n\r\nconst boardReducers = combineReducers({\r\n    taskbarReducer,\r\n    tasksReducer,\r\n    filtersReducer\r\n})\r\n\r\nexport default boardReducers;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport BoardContainer from './components/Board/index';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport boardReducers from './components/Board/reducers/index'\r\n\r\nconst boardStore = createStore(\r\n  boardReducers,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={boardStore}>\r\n    <BoardContainer />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}