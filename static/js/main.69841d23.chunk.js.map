{"version":3,"sources":["components/Board/components/Task/Task.js","components/Board/components/Task/index.js","components/Board/components/Taskbar/Taskbar.js","data/tasksData.js","config/taskbarConfig.js","utils/fakeServer.util.js","components/Board/components/Taskbar/actions.js","components/Board/components/Taskbar/selectors.js","components/Board/components/Taskbar/index.js","components/Board/Board.js","components/Board/actions.js","components/Board/selectors.js","components/Board/index.js","components/Board/reducers/taskbar.js","components/Board/reducers/tasks.js","components/Board/reducers/index.js","index.js"],"names":["Task","props","id","summary","assignee","project","img","onDragStart","className","draggable","src","alt","TasksContainer","event","dataTransfer","setData","this","React","Component","Taskbar","status","onDragOver","onDrop","tasksData","map","task","key","taskbarConfig","columnName","fakeServerUtil","Promise","resolve","setTimeout","updateTask","properties","type","payload","getTasksByStatus","createSelector","state","tasksReducer","filter","tasks","TaskbarContainer","preventDefault","dispatch","taskId","getData","actions","updateTasks","getTasksData","fetchedTasksData","tasksFilteredByStatus","enhance","connect","selectors","Board","columnNames","updateTaskbar","taskbarData","getColumnNames","taskbarReducer","taskbarItem","BoardContainer","getTaskbarConfig","compose","taskbar","action","newTasks","index","findIndex","boardReducers","combineReducers","boardStore","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.69841d23.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../../css/Task.css';\r\n\r\nconst Task = (props) => {\r\n    const { id, summary, assignee, project, img, onDragStart } = props;\r\n    \r\n    return (\r\n        <div\r\n            className=\"task\"\r\n            draggable=\"true\"\r\n            onDragStart={onDragStart}\r\n        >\r\n            <ul className=\"list\">\r\n                <li>{id}</li>\r\n                <li>{summary}</li>\r\n                <li>{assignee}</li>\r\n                <li>\r\n                    <div className=\"item-status-div\">\r\n                        <p>{project}</p>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <img\r\n                        className=\"image\"\r\n                        src={img}\r\n                        alt=''\r\n                    />\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nTask.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    assignee: PropTypes.string.isRequired,\r\n    project: PropTypes.string.isRequired,\r\n    img: PropTypes.string,\r\n    onDragStart: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Task from './Task';\r\n\r\nclass TasksContainer extends React.Component {\r\n    onDragStart = (event) => {\r\n        event.dataTransfer.setData('taskId', this.props.id);\r\n    }\r\n\r\n    render() {\r\n        const { id, summary, assignee, project, img } = this.props;\r\n        \r\n        return (\r\n            <Task\r\n                id={id}\r\n                summary={summary}\r\n                assignee={assignee}\r\n                project={project}\r\n                img={img}\r\n                onDragStart={this.onDragStart}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nTasksContainer.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    assignee: PropTypes.string.isRequired,\r\n    project: PropTypes.string.isRequired,\r\n    img: PropTypes.string\r\n}\r\n\r\nexport default TasksContainer;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TaskContainer from '../Task/index';\r\nimport '../../css/Taskbar.css';\r\n\r\nconst Taskbar = (props) => {\r\n    const { status, onDragOver, onDrop, tasksData } = props;\r\n\r\n    return (\r\n        <div className=\"taskbar\">\r\n            <div className=\"taskbar-title\">\r\n                <p>{status}</p>\r\n            </div>\r\n            <div\r\n                className=\"taskbar-list\"\r\n                onDragOver={onDragOver}\r\n                onDrop={onDrop}\r\n            >\r\n                {\r\n                    tasksData\r\n                        .map(task => (\r\n                            <TaskContainer\r\n                                key={task.id}\r\n                                id={task.id}\r\n                                summary={task.summary}\r\n                                assignee={task.assignee}\r\n                                status={task.status}\r\n                                project={task.project}\r\n                                img={task.img}\r\n                            />))\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nTaskbar.propTypes = {\r\n    status: PropTypes.string.isRequired,\r\n    onDragOver: PropTypes.func.isRequired,\r\n    onDrop: PropTypes.func.isRequired,\r\n    tasksData: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Taskbar;","export const tasksData = [\r\n    {\r\n        id: 'MJ-1',\r\n        summary: 'Learn React',\r\n        assignee: 'None',\r\n        status: 'To Do',\r\n        project: 'Education',\r\n        img: 'https://image.flaticon.com/icons/svg/2731/2731461.svg'\r\n    },\r\n    {\r\n        id: 'MJ-2',\r\n        summary: 'Learn Redux',\r\n        assignee: 'Konstantin',\r\n        status: 'To Do',\r\n        project: 'Education',\r\n        img: 'https://image.flaticon.com/icons/svg/2714/2714068.svg'\r\n    },\r\n    {\r\n        id: 'MJ-3',\r\n        summary: 'Log time',\r\n        assignee: 'Diana',\r\n        status: 'To Do',\r\n        project: 'Routine',\r\n        img: 'https://image.flaticon.com/icons/svg/145/145852.svg'\r\n    },\r\n    {\r\n        id: 'MJ-4',\r\n        summary: 'Create mini-jira',\r\n        assignee: 'Artem',\r\n        status: 'To Do',\r\n        project: 'Education',\r\n        img: 'https://image.flaticon.com/icons/svg/145/145843.svg'\r\n    },\r\n    {\r\n        id: 'MJ-5',\r\n        summary: 'Feed the cat',\r\n        assignee: 'Julia',\r\n        status: 'To Do',\r\n        project: 'Ungreatful tasks',\r\n        img: 'https://image.flaticon.com/icons/svg/2741/2741163.svg'\r\n    },\r\n    {\r\n        id: 'MJ-6',\r\n        summary: 'Play games',\r\n        assignee: 'Eugene',\r\n        status: 'To Do',\r\n        project: 'Recreation',\r\n        img: 'https://image.flaticon.com/icons/svg/2741/2741111.svg'\r\n    },\r\n    {\r\n        id: 'MJ-7',\r\n        summary: 'Do sport',\r\n        assignee: 'Lera',\r\n        status: 'To Do',\r\n        project: 'Health',\r\n        img: 'https://image.flaticon.com/icons/svg/163/163802.svg'\r\n    },\r\n    {\r\n        id: 'MJ-8',\r\n        summary: 'Cook',\r\n        assignee: 'Yuri',\r\n        status: 'To Do',\r\n        project: 'Routine',\r\n        img: 'https://image.flaticon.com/icons/svg/163/163804.svg'\r\n    }\r\n];","export const taskbarConfig = [\r\n    {\r\n        columnName: \"To Do\"\r\n    },\r\n    {\r\n        columnName: \"In Progress\"\r\n    },\r\n    {\r\n        columnName: \"Ready for testing\"\r\n    },\r\n    {\r\n        columnName: \"Completed\"\r\n    }\r\n]","import { tasksData } from '../data/tasksData';\r\nimport { taskbarConfig } from '../config/taskbarConfig';\r\n\r\nclass FakeServerUtil {\r\n    constructor() {\r\n        this.tasksData = tasksData;\r\n        this.taskbarConfig = taskbarConfig;\r\n    }\r\n\r\n    // In order to emulate request/response\r\n    async getTasksData() {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                resolve(this.tasksData);\r\n            }, 100);\r\n        })\r\n    }\r\n\r\n    // In order to emulate request/response\r\n    async getTaskbarConfig() {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                resolve(this.taskbarConfig);\r\n            }, 100);\r\n        })\r\n    }\r\n}\r\n\r\nexport const fakeServerUtil = new FakeServerUtil();\r\n","/**\r\n * Update whole store\r\n * @param {Array.<Object>} tasks \r\n */\r\nexport const updateTasksAll = (tasks) => {\r\n    return {\r\n        type: 'TASKS:UPDATE_ALL',\r\n        payload: tasks\r\n    }\r\n}\r\n\r\n/**\r\n * Update single object item in array\r\n * @param {Object} properties \r\n */\r\nexport const updateTask = (properties) => {\r\n    return {\r\n        type: 'TASKS:UPDATE_ITEM',\r\n        payload: {\r\n            ...properties\r\n        }\r\n    }\r\n}","import { createSelector } from 'reselect';\r\n\r\nconst getTasksByStatusMemo = (state, props) => {\r\n    return state.tasksReducer.filter(task => task.status === props.status);\r\n}\r\n\r\nexport const getTasksByStatus = createSelector(\r\n    [getTasksByStatusMemo],\r\n    (tasks) => tasks\r\n);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Taskbar from './Taskbar';\r\nimport { connect } from 'react-redux';\r\nimport { fakeServerUtil } from '../../../../utils/fakeServer.util';\r\nimport * as actions from './actions';\r\nimport * as selectors from './selectors';\r\nimport '../../css/Taskbar.css';\r\n\r\nclass TaskbarContainer extends React.Component {\r\n    componentDidMount() {\r\n        this.updateTasks();\r\n    }\r\n\r\n    async updateTasks() {\r\n        const { dispatch } = this.props;\r\n        const fetchedTasksData = await fakeServerUtil.getTasksData();\r\n\r\n        dispatch(actions.updateTasksAll(fetchedTasksData));\r\n    }\r\n\r\n    onDragOver = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    onDrop = (event) => {\r\n        const { status, dispatch } = this.props;\r\n        const taskId = event.dataTransfer.getData('taskId');\r\n        \r\n        dispatch(actions.updateTask({ id: taskId, status: status }))\r\n    };\r\n\r\n    render() {\r\n        const { onDragOver, onDrop, props: { status, tasksFilteredByStatus } } = this;\r\n\r\n        return (\r\n            <Taskbar\r\n                onDragOver={onDragOver}\r\n                onDrop={onDrop}\r\n                status={status}\r\n                tasksData={tasksFilteredByStatus}\r\n            />);\r\n    }\r\n}\r\n\r\nTaskbarContainer.propTypes = {\r\n    dispatch: PropTypes.func,\r\n    tasksFilteredByStatus: PropTypes.array.isRequired,\r\n    status: PropTypes.string.isRequired\r\n}\r\n\r\nconst enhance = connect(\r\n    (state, props) => ({\r\n        tasksFilteredByStatus: selectors.getTasksByStatus(state, props)\r\n    })\r\n);\r\n\r\nexport default enhance(TaskbarContainer);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TaskbarContainer from './components/Taskbar/index';\r\nimport './css/Board.css';\r\n\r\nconst Board = (props) => {\r\n    const { columnNames } = props;\r\n\r\n    return (\r\n        <div className=\"board\">\r\n            <div className=\"board-taskbar-container\">\r\n                {\r\n                    columnNames.map((columnName) => (\r\n                        <TaskbarContainer\r\n                            key={columnName}\r\n                            status={columnName}\r\n                        />))\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nBoard.propTypes = {\r\n    columnNames: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Board;","/**\r\n * Update whole store\r\n * @param {Array.<Object>} taskbarData \r\n */\r\nexport const updateTaskbar = (taskbarData) => {\r\n    return {\r\n        type: 'TASKBAR:UPDATE_ALL',\r\n        payload: taskbarData\r\n    }\r\n}","import { createSelector } from 'reselect';\r\n\r\nconst getColumnNamesMemo = (state) => state.taskbarReducer;\r\n\r\nexport const getColumnNames = createSelector(\r\n    getColumnNamesMemo,\r\n    (columnNames) => columnNames.map(\r\n        (taskbarItem) => taskbarItem.columnName)\r\n)","import React from 'react';\r\nimport Board from './Board';\r\nimport PropTypes from 'prop-types';\r\nimport { fakeServerUtil } from '../../utils/fakeServer.util';\r\nimport * as actions from './actions';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport * as selectors from './selectors';\r\n\r\nclass BoardContainer extends React.Component {\r\n    componentDidMount() {\r\n        this.updateTaskbar();\r\n    }\r\n\r\n    async updateTaskbar() {\r\n        const { dispatch } = this.props;\r\n        const taskbarData = await fakeServerUtil.getTaskbarConfig();\r\n\r\n        dispatch(actions.updateTaskbar(taskbarData));\r\n    }\r\n\r\n    render() {\r\n        const { columnNames } = this.props;\r\n        \r\n        return (\r\n            <Board columnNames={columnNames} />\r\n        )\r\n    }\r\n}\r\n\r\nBoardContainer.propTypes = {\r\n    dispatch: PropTypes.func,\r\n    columnNames: PropTypes.array.isRequired\r\n}\r\n\r\nconst enhance = compose(\r\n    connect(\r\n        (state) => ({\r\n            columnNames: selectors.getColumnNames(state)\r\n        })\r\n    )\r\n)\r\n\r\nexport default enhance(BoardContainer)","const taskbarReducer = (taskbar = [], action) => {\r\n    switch (action.type) {\r\n        case 'TASKBAR:UPDATE_ALL':\r\n            return action.payload\r\n        default:\r\n            return taskbar\r\n    }\r\n}\r\n\r\nexport default taskbarReducer;\r\n","const tasksReducer = (tasks = [], action) => {\r\n    switch (action.type) {\r\n        case 'TASKS:UPDATE_ALL':\r\n            return action.payload\r\n        case 'TASKS:UPDATE_ITEM': {\r\n            const newTasks = [...tasks];\r\n            const index = newTasks.findIndex((task) => task.id === action.payload.id);\r\n            \r\n            newTasks[index] = {\r\n                ...newTasks[index],\r\n                ...action.payload\r\n            }\r\n            return newTasks;\r\n        }\r\n        default:\r\n            return tasks\r\n    }\r\n}\r\n\r\nexport default tasksReducer;","import { combineReducers } from 'redux';\r\nimport taskbarReducer from './taskbar';\r\nimport tasksReducer from './tasks';\r\n\r\nconst boardReducers = combineReducers({\r\n    taskbarReducer,\r\n    tasksReducer\r\n})\r\n\r\nexport default boardReducers;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport BoardContainer from './components/Board/index';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport boardReducers from './components/Board/reducers/index'\r\n\r\nconst boardStore = createStore(\r\n  boardReducers,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={boardStore}>\r\n    <BoardContainer />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}