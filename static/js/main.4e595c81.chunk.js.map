{"version":3,"sources":["components/Board/components/Task/Task.js","components/Board/components/Task/index.js","components/Board/components/Taskbar/Taskbar.js","data/tasksData.js","config/taskbarConfig.js","utils/fakeServer.util.js","components/Board/actions/index.js","components/Board/components/Taskbar/index.js","components/Board/Board.js","components/Board/reducers/taskbar.js","components/Board/reducers/tasks.js","components/Board/reducers/index.js","components/Board/index.js","index.js"],"names":["Task","props","className","draggable","onDragStart","id","summary","assignee","project","src","img","alt","TasksContainer","event","dataTransfer","setData","this","React","Component","Taskbar","status","onDragOver","onDrop","tasksData","useSelector","state","tasksReducer","map","task","key","taskbarConfig","columnStatus","fakeServerUtil","Promise","resolve","setTimeout","updateTaskbar","taskbarData","type","payload","TaskbarContainer","preventDefault","tasksStore","getData","updatedTasks","updateTasks","getTasksData","connect","dispatch","tasks","Board","taskbarReducer","item","taskbar","action","boardReducers","combineReducers","store","createStore","BoardContainer","getTaskbarConfig","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e595c81.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../../css/Task.css';\r\n\r\nconst Task = (props) => {\r\n    return (\r\n        <div\r\n            className=\"task\"\r\n            draggable=\"true\"\r\n            onDragStart={props.onDragStart}\r\n        >\r\n            <ul className=\"list\">\r\n                <li>{props.id}</li>\r\n                <li>{props.summary}</li>\r\n                <li>{props.assignee}</li>\r\n                <li>\r\n                    <div className=\"item-status-div\">\r\n                        <p>{props.project}</p>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <img\r\n                        className=\"image\"\r\n                        src={props.img}\r\n                        alt=''\r\n                    />\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nTask.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    assignee: PropTypes.string.isRequired,\r\n    project: PropTypes.string.isRequired,\r\n    img: PropTypes.string,\r\n    onDragStart: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Task from './Task';\r\n\r\nclass TasksContainer extends React.Component {\r\n    onDragStart = (event) => {\r\n        event.dataTransfer.setData('taskId', this.props.id);\r\n    }\r\n\r\n    render() {\r\n        let { id, summary, assignee, project, img } = this.props;\r\n        return (\r\n            <Task\r\n                id={id}\r\n                summary={summary}\r\n                assignee={assignee}\r\n                project={project}\r\n                img={img}\r\n                onDragStart={this.onDragStart}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nTasksContainer.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    assignee: PropTypes.string.isRequired,\r\n    project: PropTypes.string.isRequired,\r\n    img: PropTypes.string\r\n}\r\n\r\nexport default TasksContainer;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector } from 'react-redux';\r\nimport TaskContainer from '../Task/index';\r\nimport '../../css/Taskbar.css';\r\n\r\nconst Taskbar = (props) => {\r\n    let { status, onDragOver, onDrop } = props;\r\n    const tasksData = useSelector(state => state.tasksReducer);\r\n\r\n    return (\r\n        <div className=\"taskbar\">\r\n            <div className=\"taskbar-title\">\r\n                <p>{status}</p>\r\n            </div>\r\n            <div\r\n                className=\"taskbar-list\"\r\n                onDragOver={onDragOver}\r\n                onDrop={onDrop}\r\n            >\r\n                {tasksData.map((task) => {\r\n                    if (task.status === status) {\r\n                        return (\r\n                            <TaskContainer\r\n                                key={task.id}\r\n                                id={task.id}\r\n                                summary={task.summary}\r\n                                assignee={task.assignee}\r\n                                status={task.status}\r\n                                project={task.project}\r\n                                img={task.img}\r\n                            />\r\n                        )\r\n                    }\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nTaskbar.propTypes = {\r\n    status: PropTypes.string.isRequired,\r\n    onDragOver: PropTypes.func.isRequired,\r\n    onDrop: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Taskbar;","export const tasksData = [\r\n    {\r\n        id: 'MJ-1',\r\n        summary: 'Learn React',\r\n        assignee: 'None',\r\n        status: 'To Do',\r\n        project: 'Education',\r\n        img: 'https://image.flaticon.com/icons/svg/2731/2731461.svg'\r\n    },\r\n    {\r\n        id: 'MJ-2',\r\n        summary: 'Learn Redux',\r\n        assignee: 'Konstantin',\r\n        status: 'To Do',\r\n        project: 'Education',\r\n        img: 'https://image.flaticon.com/icons/svg/2714/2714068.svg'\r\n    },\r\n    {\r\n        id: 'MJ-3',\r\n        summary: 'Log time',\r\n        assignee: 'Diana',\r\n        status: 'To Do',\r\n        project: 'Routine',\r\n        img: 'https://image.flaticon.com/icons/svg/145/145852.svg'\r\n    },\r\n    {\r\n        id: 'MJ-4',\r\n        summary: 'Create mini-jira',\r\n        assignee: 'Artem',\r\n        status: 'To Do',\r\n        project: 'Education',\r\n        img: 'https://image.flaticon.com/icons/svg/145/145843.svg'\r\n    },\r\n    {\r\n        id: 'MJ-5',\r\n        summary: 'Feed the cat',\r\n        assignee: 'Julia',\r\n        status: 'To Do',\r\n        project: 'Ungreatful tasks',\r\n        img: 'https://image.flaticon.com/icons/svg/2741/2741163.svg'\r\n    },\r\n    {\r\n        id: 'MJ-6',\r\n        summary: 'Play games',\r\n        assignee: 'Eugene',\r\n        status: 'To Do',\r\n        project: 'Recreation',\r\n        img: 'https://image.flaticon.com/icons/svg/2741/2741111.svg'\r\n    },\r\n    {\r\n        id: 'MJ-7',\r\n        summary: 'Do sport',\r\n        assignee: 'Lera',\r\n        status: 'To Do',\r\n        project: 'Health',\r\n        img: 'https://image.flaticon.com/icons/svg/163/163802.svg'\r\n    },\r\n    {\r\n        id: 'MJ-8',\r\n        summary: 'Cook',\r\n        assignee: 'Yuri',\r\n        status: 'To Do',\r\n        project: 'Routine',\r\n        img: 'https://image.flaticon.com/icons/svg/163/163804.svg'\r\n    }\r\n];","export const taskbarConfig = [\r\n    {\r\n        columnStatus: \"To Do\"\r\n    },\r\n    {\r\n        columnStatus: \"In Progress\"\r\n    },\r\n    {\r\n        columnStatus: \"Ready for testing\"\r\n    },\r\n    {\r\n        columnStatus: \"Completed\"\r\n    }\r\n]","import { tasksData } from '../data/tasksData';\r\nimport { taskbarConfig } from '../config/taskbarConfig';\r\n\r\nclass FakeServerUtil {\r\n    constructor() {\r\n        this.tasksData = tasksData;\r\n        this.taskbarConfig = taskbarConfig;\r\n    }\r\n\r\n    // In order to emulate request/response\r\n    async getTasksData() {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                resolve(this.tasksData);\r\n            }, 1500);\r\n        })\r\n    }\r\n\r\n    // In order to emulate request/response\r\n    async getTaskbarConfig() {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                resolve(this.taskbarConfig);\r\n            }, 1000);\r\n        })\r\n    }\r\n}\r\n\r\nexport const fakeServerUtil = new FakeServerUtil();\r\n","export const updateTasks = (tasks) => {\r\n    return {\r\n        type: 'UPDATE_TASKS',\r\n        payload: tasks\r\n    }\r\n}\r\n\r\nexport const updateTaskbar = (taskbarData) => {\r\n    return {\r\n        type: 'UPDATE_TASKBAR',\r\n        payload: taskbarData\r\n    }\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Taskbar from './Taskbar';\r\nimport { connect } from 'react-redux';\r\nimport { fakeServerUtil } from '../../../../utils/fakeServer.util';\r\nimport { updateTasks } from '../../actions/index';\r\nimport '../../css/Taskbar.css';\r\n\r\nclass TaskbarContainer extends React.Component {\r\n    componentDidMount() {\r\n        this.updateTasks();\r\n    }\r\n\r\n    async updateTasks() {\r\n        let tasksData = await fakeServerUtil.getTasksData();\r\n        this.props.updateTasks(tasksData);\r\n    }\r\n\r\n    onDragOver = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    onDrop = (event) => {\r\n        let { status } = this.props;\r\n        let { tasksReducer } = this.props.tasksStore;\r\n        const id = event.dataTransfer.getData('taskId');\r\n        const updatedTasks = tasksReducer.map(task => {\r\n            if (task.id === id) {\r\n                task.status = status;\r\n                return task\r\n            } else return task\r\n        });\r\n        this.props.updateTasks(updatedTasks);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Taskbar\r\n                onDragOver={this.onDragOver}\r\n                onDrop={this.onDrop}\r\n                status={this.props.status}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nTaskbarContainer.propTypes = {\r\n    updateTasks: PropTypes.func,\r\n    tasksStore: PropTypes.object,\r\n    status: PropTypes.string\r\n}\r\n\r\nexport default connect(\r\n    state => ({\r\n        tasksStore: state\r\n    }),\r\n    dispatch => ({\r\n        updateTasks: (tasks) => {\r\n            dispatch(updateTasks(tasks))\r\n        }\r\n    })\r\n)(TaskbarContainer);","import React from 'react';\r\nimport TaskbarContainer from './components/Taskbar/index';\r\nimport { useSelector } from 'react-redux';\r\nimport './css/Board.css';\r\n\r\nconst Board = () => {\r\n    const taskbarData = useSelector(state => state.taskbarReducer);\r\n    return (\r\n        <div className=\"board\">\r\n            <div className=\"board-taskbar-container\">\r\n                {taskbarData.map((item) => {\r\n                    return (\r\n                        <TaskbarContainer\r\n                            key={item.columnStatus}\r\n                            status={item.columnStatus}\r\n                        />\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board;","const taskbarReducer = (taskbar = [], action) => {\r\n    switch (action.type) {\r\n        case 'UPDATE_TASKBAR':\r\n            return action.payload\r\n        default:\r\n            return taskbar\r\n    }\r\n}\r\n\r\nexport default taskbarReducer;\r\n","const tasksReducer = (tasks = [], action) => {\r\n    switch (action.type) {\r\n        case 'UPDATE_TASKS':\r\n            return action.payload\r\n        default:\r\n            return tasks\r\n    }\r\n}\r\n\r\nexport default tasksReducer;","import { combineReducers } from 'redux';\r\nimport taskbarReducer from './taskbar';\r\nimport tasksReducer from './tasks';\r\n\r\nconst boardReducers = combineReducers({\r\n    taskbarReducer,\r\n    tasksReducer\r\n})\r\n\r\nexport default boardReducers;","import React from 'react';\r\nimport Board from './Board';\r\nimport { fakeServerUtil } from '../../utils/fakeServer.util';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport boardReducers from './reducers/index';\r\nimport { updateTaskbar } from './actions/index';\r\n\r\nconst store = createStore(boardReducers);\r\n\r\nexport default class BoardContainer extends React.Component {\r\n    componentDidMount() {\r\n        this.updateTaskbar();\r\n    }\r\n\r\n    async updateTaskbar() {\r\n        let taskbarData = await fakeServerUtil.getTaskbarConfig();\r\n        store.dispatch(updateTaskbar(taskbarData));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Provider store={store}>\r\n                <Board />\r\n            </Provider>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport BoardContainer from './components/Board/index';\r\n\r\nReactDOM.render(\r\n  <BoardContainer />,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}