{"version":3,"sources":["components/Board/components/Task/Task.js","components/Board/commonActions.js","components/Board/components/Task/actions.js","components/Board/components/Task/index.js","components/Board/components/Taskbar/Taskbar.js","components/Board/components/Taskbar/selectors.js","components/Board/components/Taskbar/index.js","components/Board/components/Search/Search.js","components/Board/components/Search/actions.js","components/Board/components/Search/index.js","components/Board/components/Filters/Filters.js","utils/redux.util.js","components/Board/components/Filters/selectors.js","components/Board/components/Filters/actions.js","components/Board/components/Filters/index.js","components/Board/components/Sidebar/Sidebar.js","components/Board/components/Sidebar/selectors.js","components/Board/components/Sidebar/index.js","components/Board/Board.js","components/Board/actions.js","components/Board/selectors.js","data/tasksData.js","data/employees.js","config/taskbar.js","config/filters.js","config/task.js","utils/fakeServer.util.js","components/Board/index.js","components/Board/reducers/board.js","index.js"],"names":["Task","props","id","summary","assignee","project","img","onDragStart","onClick","className","draggable","src","alt","setSidebarVisibility","isVisible","type","payload","updateTask","properties","setSidebarTaskId","taskId","TaskContainer","event","dataTransfer","setData","dispatch","commonActions","actions","currentTarget","this","React","Component","enhance","connect","Taskbar","status","onDragOver","onDrop","tasksData","map","task","key","getTasks","createSelector","state","tasks","filter","filters","find","active","searchQuery","toLowerCase","activeFilter","includes","TaskbarContainer","preventDefault","getData","selectors","Search","onChange","target","value","placeholder","setSearchQuery","query","SearchContainer","onChangeDebounced","_","debounce","FiltersPanel","applyFilter","name","createDeepEqualSelector","createSelectorCreator","defaultMemoize","getFilters","reduxUtil","setActiveFilter","filterId","FiltersContainer","useStyles","makeStyles","theme","small","width","spacing","height","medium","large","textStyles","fontWeight","Sidebar","closeSidebar","statuses","priorities","projects","employees","handleStatusChange","handlePriorityChange","handleProjectChange","handleAssigneeChange","handleSummaryChange","handleDescriptionChange","classes","Drawer","anchor","open","onClose","Grid","container","item","xs","TextField","defaultValue","label","fullWidth","InputProps","startAdornment","InputAdornment","position","Avatar","sm","select","MenuItem","employee","priority","multiline","description","variant","getVisibilityStatus","sidebar","visible","getSidebarTask","defaultTaskData","getStatuses","tasksConfig","getPriorities","getProjects","getEmployees","SidebarContainer","avatar","_handleSummaryChange","_handleDescriptionChange","Board","columnNames","columnName","updateTaskbar","taskbarData","updateTasksConfig","updateEmployees","getColumnNames","taskbar","taskbarItem","taskbarConfig","filtersConfig","taskConfig","fakeServerUtil","Promise","resolve","setTimeout","BoardContainer","updateTasks","updateFilters","updateTaskConfig","getTaskbarConfig","getTasksData","getFiltersConfig","filtersData","getTasksConfig","compose","defaultState","desciption","boardReducer","action","produce","draftState","Object","assign","updateItem","forEach","payLoadFilter","boardStore","createStore","boardReducers","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.1cfc04e3.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../../css/Task.css';\r\n\r\nconst Task = (props) => {\r\n    const { id, summary, assignee, project, img, onDragStart, onClick } = props;\r\n\r\n    return (\r\n        <div\r\n            className=\"task\"\r\n            draggable=\"true\"\r\n            onDragStart={onDragStart}\r\n            onClick={onClick}\r\n            id={id}\r\n        >\r\n            <ul className=\"list\">\r\n                <li>{id}</li>\r\n                <li>{summary}</li>\r\n                <li>{assignee}</li>\r\n                <li>\r\n                    <div className=\"item-status-div\">\r\n                        <p>{project}</p>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <img\r\n                        className=\"image\"\r\n                        src={img}\r\n                        alt=\"\"\r\n                    />\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nTask.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    assignee: PropTypes.string.isRequired,\r\n    project: PropTypes.string.isRequired,\r\n    img: PropTypes.string,\r\n    onDragStart: PropTypes.func.isRequired,\r\n    onClick: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Task;","/**\r\n * @param {Object} properties\r\n */\r\nexport const setSidebarVisibility = (isVisible) => {\r\n    return {\r\n        type: 'SIDEBAR:SET_VISIBILITY',\r\n        payload: isVisible\r\n    };\r\n};\r\n\r\n/**\r\n * Update single object item in array\r\n * @param {Object} properties\r\n */\r\nexport const updateTask = (properties) => {\r\n    return {\r\n        type: 'TASKS:UPDATE_ITEM',\r\n        payload: {\r\n            ...properties\r\n        }\r\n    };\r\n};","/**\r\n * @param {String} taskId\r\n */\r\nexport const setSidebarTaskId = (taskId) => {\r\n    return {\r\n        type: 'SIDEBAR:SET_TASKID',\r\n        payload: taskId\r\n    };\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Task from './Task';\r\nimport * as commonActions from '../../commonActions';\r\nimport * as actions from './actions';\r\nimport { connect } from 'react-redux';\r\n\r\nclass TaskContainer extends React.Component {\r\n    onDragStart = (event) => {\r\n        event.dataTransfer.setData('taskId', this.props.id);\r\n    }\r\n\r\n    onClick = (event) => {\r\n        const { dispatch } = this.props;\r\n\r\n        dispatch(commonActions.setSidebarVisibility(true));\r\n        dispatch(actions.setSidebarTaskId(event.currentTarget.id));\r\n    }\r\n\r\n    render() {\r\n        const { id, summary, assignee, project, img } = this.props;\r\n\r\n        return (\r\n            <Task\r\n                id={id}\r\n                summary={summary}\r\n                assignee={assignee}\r\n                project={project}\r\n                img={img}\r\n                onDragStart={this.onDragStart}\r\n                onClick={this.onClick}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nTaskContainer.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    assignee: PropTypes.string.isRequired,\r\n    project: PropTypes.string.isRequired,\r\n    img: PropTypes.string,\r\n    dispatch: PropTypes.func.isRequired\r\n};\r\n\r\nconst enhance = connect();\r\n\r\nexport default enhance(TaskContainer);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TaskContainer from '../Task/index';\r\nimport '../../css/Taskbar.css';\r\n\r\nconst Taskbar = (props) => {\r\n    const { status, onDragOver, onDrop, tasksData } = props;\r\n\r\n    return (\r\n        <div className=\"taskbar\">\r\n            <div className=\"taskbar-title\">\r\n                <p>{status}</p>\r\n            </div>\r\n            <div\r\n                className=\"taskbar-list\"\r\n                onDragOver={onDragOver}\r\n                onDrop={onDrop}\r\n            >\r\n                {\r\n                    tasksData\r\n                        .map(task => (\r\n                            <TaskContainer\r\n                                key={task.id}\r\n                                id={task.id}\r\n                                summary={task.summary}\r\n                                assignee={task.assignee}\r\n                                status={task.status}\r\n                                project={task.project}\r\n                                img={task.img}\r\n                            />))\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nTaskbar.propTypes = {\r\n    status: PropTypes.string.isRequired,\r\n    onDragOver: PropTypes.func.isRequired,\r\n    onDrop: PropTypes.func.isRequired,\r\n    tasksData: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Taskbar;","import { createSelector } from 'reselect';\r\n\r\nconst getTasksMemo = (state, props) => state.tasks.filter((task) => task.status === props.status);\r\nconst getActiveFilterMemo = (state) => state.filters.find((filter) => filter.active);\r\nconst getSearchQueryMemo = (state) => state.searchQuery.toLowerCase();\r\n\r\nexport const getTasks = createSelector(\r\n    [\r\n        getTasksMemo,\r\n        getActiveFilterMemo,\r\n        getSearchQueryMemo\r\n    ],\r\n    (tasks, activeFilter, searchQuery) => {\r\n        if (activeFilter?.assignee) {\r\n            tasks = tasks.filter((task) => task.assignee === activeFilter.assignee);\r\n        }\r\n\r\n        if (activeFilter?.project) {\r\n            tasks = tasks.filter((task) => task.project === activeFilter.project);\r\n        }\r\n\r\n        if (searchQuery) {\r\n            tasks = tasks.filter((task) => task.summary.toLowerCase().includes(searchQuery)\r\n                || task.assignee.toLowerCase().includes(searchQuery)\r\n                || task.project.toLowerCase().includes(searchQuery)\r\n                || task.status.toLowerCase().includes(searchQuery));\r\n        }\r\n\r\n        return tasks;\r\n    }\r\n);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Taskbar from './Taskbar';\r\nimport { connect } from 'react-redux';\r\nimport * as commonActions from '../../commonActions';\r\nimport * as selectors from './selectors';\r\nimport '../../css/Taskbar.css';\r\n\r\nclass TaskbarContainer extends React.Component {\r\n    onDragOver = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    onDrop = (event) => {\r\n        const { status, dispatch } = this.props;\r\n        const taskId = event.dataTransfer.getData('taskId');\r\n\r\n        dispatch(commonActions.updateTask({ id: taskId, status }));\r\n    };\r\n\r\n    render() {\r\n        const { status, tasks } = this.props;\r\n\r\n        return (\r\n            <Taskbar\r\n                onDragOver={this.onDragOver}\r\n                onDrop={this.onDrop}\r\n                status={status}\r\n                tasksData={tasks}\r\n            />);\r\n    }\r\n}\r\n\r\nTaskbarContainer.propTypes = {\r\n    dispatch: PropTypes.func,\r\n    tasks: PropTypes.array.isRequired,\r\n    status: PropTypes.string.isRequired\r\n};\r\n\r\nconst enhance = connect(\r\n    (state, props) => ({\r\n        tasks: selectors.getTasks(state, props)\r\n    })\r\n);\r\n\r\nexport default enhance(TaskbarContainer);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../../css/Filters.css';\r\n\r\nconst Search = (props) => {\r\n    const { onChange } = props;\r\n\r\n    return (\r\n        <input type=\"text\" className=\"quick-search\" onChange={(event) => onChange(event.target.value)} placeholder=\"Search...\" />\r\n    );\r\n};\r\n\r\nSearch.propTypes = {\r\n    onChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Search;","/**\r\n * Update single object item in array\r\n * @param {String} query\r\n */\r\nexport const setSearchQuery = (query) => {\r\n    return {\r\n        type: 'SEARCH:SET_QUERY',\r\n        payload: query\r\n    };\r\n};","import React from 'react';\r\nimport Search from './Search';\r\nimport PropTypes from 'prop-types';\r\nimport _ from 'underscore';\r\nimport * as actions from './actions';\r\nimport { connect } from 'react-redux';\r\nimport '../../css/Filters.css';\r\n\r\nclass SearchContainer extends React.Component {\r\n    onChange = (value) => {\r\n        const { dispatch } = this.props;\r\n\r\n        dispatch(actions.setSearchQuery(value));\r\n    }\r\n\r\n    onChangeDebounced = _.debounce(this.onChange, 200);\r\n\r\n    render() {\r\n        return (\r\n            <Search onChange={this.onChangeDebounced} />\r\n        );\r\n    }\r\n}\r\n\r\nSearchContainer.propTypes = {\r\n    dispatch: PropTypes.func.isRequired\r\n};\r\n\r\nconst enhance = connect();\r\n\r\nexport default enhance(SearchContainer);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../../css/Filters.css';\r\nimport SearchContainer from '../Search/index';\r\n\r\nconst FiltersPanel = (props) => {\r\n    const { filters, applyFilter } = props;\r\n\r\n    return (\r\n        <div className=\"filtersPanel\">\r\n            <div className=\"quick-filters-container\">\r\n                <dt>\r\n                    {'QUICK FILTERS:'}\r\n                </dt>\r\n                {\r\n                    filters.map((filter) => (\r\n                        <dd key={filter.id}>\r\n                            <button\r\n                                type=\"submit\"\r\n                                id={filter.id}\r\n                                className=\"filter-button\"\r\n                                onClick={applyFilter}\r\n                            >\r\n                                {filter.name}\r\n                            </button>\r\n                        </dd>\r\n                    ))\r\n                }\r\n            </div>\r\n            <div className=\"quick-search-container\">\r\n                <SearchContainer />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nFiltersPanel.propTypes = {\r\n    filters: PropTypes.array.isRequired,\r\n    applyFilter: PropTypes.func.isRequired\r\n};\r\n\r\nexport default FiltersPanel;","import * as _ from 'underscore';\r\nimport { createSelectorCreator, defaultMemoize } from 'reselect';\r\n\r\nexport const createDeepEqualSelector = createSelectorCreator(\r\n    defaultMemoize,\r\n    _.isEqual\r\n);","import * as reduxUtil from '../../../../utils/redux.util';\r\n\r\nconst getFiltersMemo = (state) => state.filters;\r\n\r\nexport const getFilters = reduxUtil.createDeepEqualSelector(\r\n    [getFiltersMemo],\r\n    (filters) => filters\r\n);","\r\n/**\r\n * @param {String} filterId\r\n */\r\nexport const setActiveFilter = (filterId) => {\r\n    return {\r\n        type: 'FILTERS:SET_ACTIVE',\r\n        payload: filterId\r\n    };\r\n};","import React from 'react';\r\nimport FiltersPanel from './Filters';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport * as selectors from './selectors';\r\nimport * as actions from './actions';\r\n\r\nclass FiltersContainer extends React.Component {\r\n    applyFilter = (event) => {\r\n        event.preventDefault();\r\n\r\n        const { dispatch } = this.props;\r\n\r\n        dispatch(actions.setActiveFilter(event.target.id));\r\n    }\r\n\r\n    render() {\r\n        const { filters } = this.props;\r\n\r\n        return (\r\n            <FiltersPanel\r\n                filters={filters}\r\n                applyFilter={this.applyFilter}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nFiltersContainer.propTypes = {\r\n    dispatch: PropTypes.func,\r\n    filters: PropTypes.array.isRequired\r\n};\r\n\r\nconst enhance = connect(\r\n    (state) => ({\r\n        filters: selectors.getFilters(state)\r\n    })\r\n);\r\n\r\nexport default enhance(FiltersContainer);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport '../../css/Sidebar.css';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    small: {\r\n        width: theme.spacing(3),\r\n        height: theme.spacing(3)\r\n    },\r\n    medium: {\r\n        width: theme.spacing(4),\r\n        height: theme.spacing(4)\r\n    },\r\n    large: {\r\n        width: theme.spacing(7),\r\n        height: theme.spacing(7)\r\n    },\r\n    textStyles: {\r\n        fontWeight: 'bold'\r\n    }\r\n}));\r\n\r\nconst Sidebar = (props) => {\r\n    const {\r\n        closeSidebar,\r\n        isVisible,\r\n        task,\r\n        statuses,\r\n        priorities,\r\n        projects,\r\n        employees,\r\n        handleStatusChange,\r\n        handlePriorityChange,\r\n        handleProjectChange,\r\n        handleAssigneeChange,\r\n        handleSummaryChange,\r\n        handleDescriptionChange\r\n    } = props;\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <Drawer anchor=\"right\" open={isVisible} onClose={closeSidebar}>\r\n                <div className=\"sidebar\">\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                id=\"standard-basic\"\r\n                                defaultValue={task.summary}\r\n                                label={task.id}\r\n                                onChange={(event) => handleSummaryChange(event.target.value, task.id)}\r\n                                fullWidth\r\n                                InputProps={{\r\n                                    startAdornment: (\r\n                                        <InputAdornment position=\"start\">\r\n                                            <Avatar\r\n                                                alt=\"Remy Sharp\"\r\n                                                src=\"https://image.flaticon.com/icons/png/512/2628/2628496.png\"\r\n                                                className={classes.medium}\r\n                                            />\r\n                                        </InputAdornment>\r\n                                    )\r\n                                }}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                select\r\n                                value={task.status}\r\n                                onChange={(event) => handleStatusChange(event, task.id)}\r\n                                InputProps={{\r\n                                    startAdornment: <InputAdornment position=\"start\">{'Status:'}</InputAdornment>\r\n                                }}\r\n                            >\r\n                                {statuses.map((status) => (\r\n                                    <MenuItem key={status} value={status}>\r\n                                        {status}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                select\r\n                                value={task.assignee}\r\n                                onChange={(event) => handleAssigneeChange(event, task.id)}\r\n                                InputProps={{\r\n                                    startAdornment: (<InputAdornment position=\"start\">\r\n                                        {'Assignee:'}\r\n                                        <Avatar alt=\"Remy Sharp\" src={task.img} className={classes.small} />\r\n                                    </InputAdornment>)\r\n                                }}\r\n                            >\r\n                                {employees.map((employee) => (\r\n                                    <MenuItem key={employee.name} value={employee.name}>\r\n                                        {employee.name}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                select\r\n                                value={task.priority}\r\n                                onChange={(event) => handlePriorityChange(event, task.id)}\r\n                                InputProps={{\r\n                                    startAdornment: <InputAdornment position=\"start\">{'Priority:'}</InputAdornment>\r\n                                }}\r\n                            >\r\n                                {priorities.map((priority) => (\r\n                                    <MenuItem key={priority} value={priority}>\r\n                                        {priority}\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid item xs={12} sm={6}>\r\n                            <TextField\r\n                                select\r\n                                value={task.project}\r\n                                onChange={(event) => handleProjectChange(event, task.id)}\r\n                                InputProps={{\r\n                                    startAdornment: <InputAdornment position=\"start\">{'Project:'}</InputAdornment>\r\n                                }}\r\n                            >\r\n                                {projects.map((project) => (\r\n                                    <MenuItem key={project} value={project}>\r\n                                        {project}\r\n                                    </MenuItem>\r\n                                ))}\r\n\r\n                            </TextField>\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                id=\"outlined-multiline-static\"\r\n                                label=\"Description\"\r\n                                onChange={(event) => handleDescriptionChange(event.target.value, task.id)}\r\n                                multiline\r\n                                fullWidth\r\n                                defaultValue={task.description}\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </div>\r\n            </Drawer>\r\n        </div>\r\n    );\r\n};\r\n\r\nSidebar.propTypes = {\r\n    closeSidebar: PropTypes.func.isRequired,\r\n    task: PropTypes.object.isRequired,\r\n    isVisible: PropTypes.bool.isRequired,\r\n    statuses: PropTypes.array.isRequired,\r\n    priorities: PropTypes.array.isRequired,\r\n    projects: PropTypes.array.isRequired,\r\n    employees: PropTypes.array.isRequired,\r\n    handleStatusChange: PropTypes.func.isRequired,\r\n    handlePriorityChange: PropTypes.func.isRequired,\r\n    handleProjectChange: PropTypes.func.isRequired,\r\n    handleAssigneeChange: PropTypes.func.isRequired,\r\n    handleSummaryChange: PropTypes.func.isRequired,\r\n    handleDescriptionChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Sidebar;","import * as reduxUtil from '../../../../utils/redux.util';\r\n\r\nconst getSidebarVisibilityMemo = (state) => state.sidebar.visible;\r\nconst getSidebarTaskMemo = (state) => {\r\n    return state.sidebar.taskId\r\n        ? state.tasks.find((task) => task.id === state.sidebar.taskId)\r\n        : state.sidebar.defaultTaskData;\r\n};\r\nconst getStatusesMemo = (state) => state.tasksConfig.statuses;\r\nconst getPrioritiesMemo = (state) => state.tasksConfig.priorities;\r\nconst getProjectsMemo = (state) => state.tasksConfig.projects;\r\nconst getEmployeesMemo = (state) => state.employees;\r\n\r\nexport const getVisibilityStatus = reduxUtil.createDeepEqualSelector(\r\n    [getSidebarVisibilityMemo],\r\n    (isVisible) => isVisible\r\n);\r\n\r\nexport const getSidebarTask = reduxUtil.createDeepEqualSelector(\r\n    [getSidebarTaskMemo],\r\n    (task) => task\r\n);\r\n\r\nexport const getStatuses = reduxUtil.createDeepEqualSelector(\r\n    [getStatusesMemo],\r\n    (statuses) => statuses\r\n);\r\n\r\nexport const getPriorities = reduxUtil.createDeepEqualSelector(\r\n    [getPrioritiesMemo],\r\n    (priorities) => priorities\r\n);\r\n\r\nexport const getProjects = reduxUtil.createDeepEqualSelector(\r\n    [getProjectsMemo],\r\n    (projects) => projects\r\n);\r\n\r\nexport const getEmployees = reduxUtil.createDeepEqualSelector(\r\n    [getEmployeesMemo],\r\n    (employee) => employee\r\n);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Sidebar from './Sidebar';\r\nimport _ from 'underscore';\r\nimport { connect } from 'react-redux';\r\nimport * as commonActions from '../../commonActions';\r\nimport * as selectors from './selectors';\r\nimport '../../css/Filters.css';\r\n\r\nclass SidebarContainer extends React.Component {\r\n    closeSidebar = () => {\r\n        const { dispatch } = this.props;\r\n\r\n        dispatch(commonActions.setSidebarVisibility(false));\r\n    }\r\n\r\n    handleStatusChange = (event, taskId) => {\r\n        const { dispatch } = this.props;\r\n\r\n        dispatch(commonActions.updateTask({ id: taskId, status: event.target.value }));\r\n    }\r\n\r\n    handlePriorityChange = (event, taskId) => {\r\n        const { dispatch } = this.props;\r\n\r\n        dispatch(commonActions.updateTask({ id: taskId, priority: event.target.value }));\r\n    }\r\n\r\n    handleProjectChange = (event, taskId) => {\r\n        const { dispatch } = this.props;\r\n\r\n        dispatch(commonActions.updateTask({ id: taskId, project: event.target.value }));\r\n    }\r\n\r\n    handleAssigneeChange = (event, taskId) => {\r\n        const { dispatch, employees } = this.props;\r\n        const assignee = employees.find((employee) => employee.name === event.target.value);\r\n\r\n        dispatch(commonActions.updateTask({\r\n            id: taskId,\r\n            assignee: event.target.value,\r\n            img: assignee.avatar\r\n        }));\r\n    }\r\n\r\n    _handleSummaryChange = (value, taskId) => {\r\n        const { dispatch } = this.props;\r\n\r\n        dispatch(commonActions.updateTask({ id: taskId, summary: value }));\r\n    }\r\n\r\n    _handleDescriptionChange = (value, taskId) => {\r\n        const { dispatch } = this.props;\r\n\r\n        dispatch(commonActions.updateTask({ id: taskId, description: value }));\r\n    };\r\n\r\n    handleSummaryChange = _.debounce(this._handleSummaryChange, 200);\r\n\r\n    handleDescriptionChange = _.debounce(this._handleDescriptionChange, 200);\r\n\r\n    render() {\r\n        const {\r\n            isVisible,\r\n            task,\r\n            statuses,\r\n            priorities,\r\n            projects,\r\n            employees\r\n        } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <Sidebar\r\n                    closeSidebar={this.closeSidebar}\r\n                    isVisible={isVisible}\r\n                    task={task}\r\n                    statuses={statuses}\r\n                    priorities={priorities}\r\n                    projects={projects}\r\n                    employees={employees}\r\n                    handleStatusChange={this.handleStatusChange}\r\n                    handlePriorityChange={this.handlePriorityChange}\r\n                    handleProjectChange={this.handleProjectChange}\r\n                    handleAssigneeChange={this.handleAssigneeChange}\r\n                    handleSummaryChange={this.handleSummaryChange}\r\n                    handleDescriptionChange={this.handleDescriptionChange}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSidebarContainer.propTypes = {\r\n    dispatch: PropTypes.func.isRequired,\r\n    isVisible: PropTypes.bool.isRequired,\r\n    task: PropTypes.object.isRequired,\r\n    statuses: PropTypes.array.isRequired,\r\n    priorities: PropTypes.array.isRequired,\r\n    projects: PropTypes.array.isRequired,\r\n    employees: PropTypes.array.isRequired\r\n};\r\n\r\nconst enhance = connect((state) => ({\r\n    isVisible: selectors.getVisibilityStatus(state),\r\n    task: selectors.getSidebarTask(state),\r\n    statuses: selectors.getStatuses(state),\r\n    priorities: selectors.getPriorities(state),\r\n    projects: selectors.getProjects(state),\r\n    employees: selectors.getEmployees(state)\r\n}));\r\n\r\nexport default enhance(SidebarContainer);","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport TaskbarContainer from './components/Taskbar/index';\r\nimport './css/Board.css';\r\nimport FiltersContainer from './components/Filters/index';\r\nimport SidebarContainer from './components/Sidebar/index';\r\n\r\nconst Board = (props) => {\r\n    const { columnNames } = props;\r\n\r\n    return (\r\n        <div className=\"board\">\r\n            <SidebarContainer />\r\n            <FiltersContainer />\r\n            <div className=\"board-taskbar-container\">\r\n                {\r\n                    columnNames.map((columnName) => (\r\n                        <TaskbarContainer\r\n                            key={columnName}\r\n                            status={columnName}\r\n                        />))\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nBoard.propTypes = {\r\n    columnNames: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Board;","/**\r\n * Re-write related store\r\n * @param {Array.<Object>} taskbarData\r\n */\r\nexport const updateTaskbar = (taskbarData) => {\r\n    return {\r\n        type: 'TASKBAR:UPDATE_ALL',\r\n        payload: taskbarData\r\n    };\r\n};\r\n\r\n/**\r\n * Re-write related store\r\n * @param {Array.<Object>} tasks\r\n */\r\nexport const updateTasksAll = (tasks) => {\r\n    return {\r\n        type: 'TASKS:UPDATE_ALL',\r\n        payload: tasks\r\n    };\r\n};\r\n\r\n/**\r\n * @param {Object} tasksConfig\r\n */\r\nexport const updateTasksConfig = (tasksConfig) => {\r\n    return {\r\n        type: 'TASKS:CONFIG:UPDATE',\r\n        payload: tasksConfig\r\n    };\r\n};\r\n\r\n/**\r\n * Re-write related store\r\n * @param {Array.<Object>} filters\r\n */\r\nexport const updateFilters = (filters) => {\r\n    return {\r\n        type: 'FILTERS:SET',\r\n        payload: filters\r\n    };\r\n};\r\n\r\n/**\r\n * @param {Array} employees\r\n */\r\nexport const updateEmployees = (employees) => {\r\n    return {\r\n        type: 'GLOBAL:UPDATE_EMPLOYEES',\r\n        payload: employees\r\n    };\r\n};","import * as reduxUtil from '../../utils/redux.util';\r\n\r\nconst getColumnNamesMemo = (state) => state.taskbar;\r\n\r\nexport const getColumnNames = reduxUtil.createDeepEqualSelector(\r\n    [getColumnNamesMemo],\r\n    (taskbar) => taskbar.map(\r\n        (taskbarItem) => taskbarItem.columnName\r\n    )\r\n);","export const tasksData = [\r\n    {\r\n        id: 'MJ-1',\r\n        summary: 'Learn React',\r\n        assignee: 'Anya',\r\n        status: 'To Do',\r\n        project: 'Education',\r\n        priority: 'High',\r\n        img: 'https://image.flaticon.com/icons/png/512/417/417776.png',\r\n        description: `1. Open JIRA MJ-1\\n`\r\n            + `2. Enter \"Education\"\\n`\r\n            + `3. Check if only education tasks are displayed\\n`\r\n            + `\\n`\r\n            + `AR: Something wrong happened\\n`\r\n            + `ER: Nothing wrong happened\\n`\r\n            + `\\n`\r\n            + `Devices:\\n`\r\n            + ` - Desktop # Win10 # Chrome\\n`\r\n            + ` - iPhone X # iOS10.3.2 # Safari`\r\n    },\r\n    {\r\n        id: 'MJ-2',\r\n        summary: 'Learn Redux',\r\n        assignee: 'Konstantin',\r\n        status: 'To Do',\r\n        project: 'Education',\r\n        priority: 'High',\r\n        img: 'https://image.flaticon.com/icons/svg/2714/2714068.svg',\r\n        description: `1. Open JIRA MJ-1\\n`\r\n            + `2. Enter \"Education\"\\n`\r\n            + `3. Check if only education tasks are displayed\\n`\r\n            + `\\n`\r\n            + `AR: Something wrong happened\\n`\r\n            + `ER: Nothing wrong happened\\n`\r\n            + `\\n`\r\n            + `Devices:\\n`\r\n            + ` - Desktop # Win10 # Chrome\\n`\r\n            + ` - iPhone X # iOS10.3.2 # Safari`\r\n    },\r\n    {\r\n        id: 'MJ-3',\r\n        summary: 'Log time',\r\n        assignee: 'Lena',\r\n        status: 'To Do',\r\n        project: 'Routine',\r\n        priority: 'Medium',\r\n        img: 'https://image.flaticon.com/icons/svg/145/145852.svg',\r\n        description: `1. Open JIRA MJ-1\\n`\r\n            + `2. Enter \"Education\"\\n`\r\n            + `3. Check if only education tasks are displayed\\n`\r\n            + `\\n`\r\n            + `AR: Something wrong happened\\n`\r\n            + `ER: Nothing wrong happened\\n`\r\n            + `\\n`\r\n            + `Devices:\\n`\r\n            + ` - Desktop # Win10 # Chrome\\n`\r\n            + ` - iPhone X # iOS10.3.2 # Safari`\r\n    },\r\n    {\r\n        id: 'MJ-4',\r\n        summary: 'Create mini-jira',\r\n        assignee: 'Max',\r\n        status: 'To Do',\r\n        project: 'Education',\r\n        priority: 'Very High',\r\n        img: 'https://image.flaticon.com/icons/svg/145/145843.svg',\r\n        description: `1. Open JIRA MJ-1\\n`\r\n            + `2. Enter \"Education\"\\n`\r\n            + `3. Check if only education tasks are displayed\\n`\r\n            + `\\n`\r\n            + `AR: Something wrong happened\\n`\r\n            + `ER: Nothing wrong happened\\n`\r\n            + `\\n`\r\n            + `Devices:\\n`\r\n            + ` - Desktop # Win10 # Chrome\\n`\r\n            + ` - iPhone X # iOS10.3.2 # Safari`\r\n    },\r\n    {\r\n        id: 'MJ-5',\r\n        summary: 'Feed the cat',\r\n        assignee: 'Katya',\r\n        status: 'To Do',\r\n        project: 'Ungreatful tasks',\r\n        priority: 'High',\r\n        img: 'https://image.flaticon.com/icons/svg/2741/2741163.svg',\r\n        description: `1. Open JIRA MJ-1\\n`\r\n            + `2. Enter \"Education\"\\n`\r\n            + `3. Check if only education tasks are displayed\\n`\r\n            + `\\n`\r\n            + `AR: Something wrong happened\\n`\r\n            + `ER: Nothing wrong happened\\n`\r\n            + `\\n`\r\n            + `Devices:\\n`\r\n            + ` - Desktop # Win10 # Chrome\\n`\r\n            + ` - iPhone X # iOS10.3.2 # Safari`\r\n    },\r\n    {\r\n        id: 'MJ-6',\r\n        summary: 'Play games',\r\n        assignee: 'Eugene',\r\n        status: 'To Do',\r\n        project: 'Recreation',\r\n        priority: 'Low',\r\n        img: 'https://image.flaticon.com/icons/svg/2741/2741111.svg',\r\n        description: `1. Open JIRA MJ-1\\n`\r\n            + `2. Enter \"Education\"\\n`\r\n            + `3. Check if only education tasks are displayed\\n`\r\n            + `\\n`\r\n            + `AR: Something wrong happened\\n`\r\n            + `ER: Nothing wrong happened\\n`\r\n            + `\\n`\r\n            + `Devices:\\n`\r\n            + ` - Desktop # Win10 # Chrome\\n`\r\n            + ` - iPhone X # iOS10.3.2 # Safari`\r\n    },\r\n    {\r\n        id: 'MJ-7',\r\n        summary: 'Do sport',\r\n        assignee: 'Another Anya',\r\n        status: 'To Do',\r\n        project: 'Health',\r\n        priority: 'Medium',\r\n        img: 'https://image.flaticon.com/icons/svg/163/163802.svg',\r\n        description: `1. Open JIRA MJ-1\\n`\r\n            + `2. Enter \"Education\"\\n`\r\n            + `3. Check if only education tasks are displayed\\n`\r\n            + `\\n`\r\n            + `AR: Something wrong happened\\n`\r\n            + `ER: Nothing wrong happened\\n`\r\n            + `\\n`\r\n            + `Devices:\\n`\r\n            + ` - Desktop # Win10 # Chrome\\n`\r\n            + ` - iPhone X # iOS10.3.2 # Safari`\r\n    },\r\n    {\r\n        id: 'MJ-8',\r\n        summary: 'Cook',\r\n        assignee: 'Dima',\r\n        status: 'To Do',\r\n        project: 'Routine',\r\n        priority: 'Low',\r\n        img: 'https://image.flaticon.com/icons/svg/163/163804.svg',\r\n        description: `1. Open JIRA MJ-1\\n`\r\n            + `2. Enter \"Education\"\\n`\r\n            + `3. Check if only education tasks are displayed\\n`\r\n            + `\\n`\r\n            + `AR: Something wrong happened\\n`\r\n            + `ER: Nothing wrong happened\\n`\r\n            + `\\n`\r\n            + `Devices:\\n`\r\n            + ` - Desktop # Win10 # Chrome\\n`\r\n            + ` - iPhone X # iOS10.3.2 # Safari`\r\n    }\r\n];","export const employees = [\r\n    {\r\n        name: 'Anya',\r\n        avatar: 'https://image.flaticon.com/icons/png/512/417/417776.png'\r\n    },\r\n    {\r\n        name: 'Konstantin',\r\n        avatar: 'https://image.flaticon.com/icons/svg/2714/2714068.svg'\r\n    },\r\n    {\r\n        name: 'Lena',\r\n        avatar: 'https://image.flaticon.com/icons/svg/145/145852.svg'\r\n    },\r\n    {\r\n        name: 'Max',\r\n        avatar: 'https://image.flaticon.com/icons/svg/145/145843.svg'\r\n    },\r\n    {\r\n        name: 'Katya',\r\n        avatar: 'https://image.flaticon.com/icons/svg/2741/2741163.svg'\r\n    },\r\n    {\r\n        name: 'Eugene',\r\n        avatar: 'https://image.flaticon.com/icons/svg/2741/2741111.svg'\r\n    },\r\n    {\r\n        name: 'Another Anya',\r\n        avatar: 'https://image.flaticon.com/icons/svg/163/163802.svg'\r\n    },\r\n    {\r\n        name: 'Dima',\r\n        avatar: 'https://image.flaticon.com/icons/svg/163/163804.svg'\r\n    }\r\n];","export const taskbarConfig = [\r\n    {\r\n        columnName: 'To Do'\r\n    },\r\n    {\r\n        columnName: 'In Progress'\r\n    },\r\n    {\r\n        columnName: 'Ready For Testing'\r\n    },\r\n    {\r\n        columnName: 'Completed'\r\n    }\r\n];","export const filtersConfig = [\r\n    {\r\n        id: 'all-filter',\r\n        name: 'All',\r\n        project: '',\r\n        assignee: '',\r\n        summary: ''\r\n    },\r\n    {\r\n        id: 'education-filter',\r\n        name: 'Education',\r\n        project: 'Education',\r\n        assignee: '',\r\n        summary: ''\r\n    },\r\n    {\r\n        id: 'routine-filter',\r\n        name: 'Routine',\r\n        project: 'Routine',\r\n        assignee: '',\r\n        summary: ''\r\n    },\r\n    {\r\n        id: 'recreation-filter',\r\n        name: 'Recreation',\r\n        project: 'Recreation',\r\n        assignee: '',\r\n        summary: ''\r\n    }\r\n];","export const taskConfig = {\r\n    statuses: ['To Do', 'In Progress', 'Ready For Testing', 'Completed'],\r\n    priorities: ['Blocker', 'Very High', 'High', 'Medium', 'Low', 'Not Prioritized'],\r\n    projects: ['Education', 'Ungreatful tasks', 'Recreation', 'Health', 'Routine']\r\n};","import { tasksData } from '../data/tasksData';\r\nimport { employees } from '../data/employees';\r\nimport { taskbarConfig } from '../config/taskbar';\r\nimport { filtersConfig } from '../config/filters';\r\nimport { taskConfig } from '../config/task';\r\n\r\n// Class developed in order to emulate async server calls\r\nclass FakeServerUtil {\r\n    constructor() {\r\n        this.tasksData = tasksData;\r\n        this.taskbarConfig = taskbarConfig;\r\n        this.filtersConfig = filtersConfig;\r\n        this.taskConfig = taskConfig;\r\n        this.employees = employees;\r\n    }\r\n\r\n    getTasksData() {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                resolve(this.tasksData);\r\n            }, 100);\r\n        });\r\n    }\r\n\r\n    getTaskbarConfig() {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                resolve(this.taskbarConfig);\r\n            }, 100);\r\n        });\r\n    }\r\n\r\n    getFiltersConfig() {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                resolve(this.filtersConfig);\r\n            }, 100);\r\n        });\r\n    }\r\n\r\n    getTasksConfig() {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                resolve(this.taskConfig);\r\n            }, 2000);\r\n        });\r\n    }\r\n\r\n    getEmployees() {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                resolve(this.employees);\r\n            }, 2000);\r\n        });\r\n    }\r\n}\r\n\r\nexport const fakeServerUtil = new FakeServerUtil();","import React from 'react';\r\nimport Board from './Board';\r\nimport PropTypes from 'prop-types';\r\nimport * as actions from './actions';\r\nimport * as selectors from './selectors';\r\nimport { fakeServerUtil } from '../../utils/fakeServer.util';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\n\r\nclass BoardContainer extends React.Component {\r\n    componentDidMount() {\r\n        this.updateTaskbar();\r\n        this.updateTasks();\r\n        this.updateFilters();\r\n        this.updateTaskConfig();\r\n        this.updateEmployees();\r\n    }\r\n\r\n    async updateTaskbar() {\r\n        const { dispatch } = this.props;\r\n        const taskbarData = await fakeServerUtil.getTaskbarConfig();\r\n\r\n        dispatch(actions.updateTaskbar(taskbarData));\r\n    }\r\n\r\n    async updateTasks() {\r\n        const { dispatch } = this.props;\r\n        const tasksData = await fakeServerUtil.getTasksData();\r\n\r\n        dispatch(actions.updateTasksAll(tasksData));\r\n    }\r\n\r\n    async updateFilters() {\r\n        const { dispatch } = this.props;\r\n        const filtersData = await fakeServerUtil.getFiltersConfig();\r\n\r\n        dispatch(actions.updateFilters(filtersData));\r\n    }\r\n\r\n    async updateTaskConfig() {\r\n        const { dispatch } = this.props;\r\n        const tasksConfig = await fakeServerUtil.getTasksConfig();\r\n\r\n        dispatch(actions.updateTasksConfig(tasksConfig));\r\n    }\r\n\r\n    async updateEmployees() {\r\n        const { dispatch } = this.props;\r\n        const employees = await fakeServerUtil.getEmployees();\r\n\r\n        dispatch(actions.updateEmployees(employees));\r\n    }\r\n\r\n    render() {\r\n        const { columnNames } = this.props;\r\n\r\n        return (\r\n            <Board columnNames={columnNames} />\r\n        );\r\n    }\r\n}\r\n\r\nBoardContainer.propTypes = {\r\n    dispatch: PropTypes.func,\r\n    columnNames: PropTypes.array.isRequired\r\n};\r\n\r\nconst enhance = compose(\r\n    connect(\r\n        (state) => ({\r\n            columnNames: selectors.getColumnNames(state)\r\n        })\r\n    )\r\n);\r\n\r\nexport default enhance(BoardContainer);","import { produce } from 'immer';\r\n\r\nconst defaultState = {\r\n    taskbar: [],\r\n    tasks: [],\r\n    filters: [],\r\n    searchQuery: '',\r\n    employees: [],\r\n    tasksConfig: {\r\n        statuses: [],\r\n        priorities: [],\r\n        projects: []\r\n    },\r\n    sidebar: {\r\n        visible: false,\r\n        taskId: '',\r\n        defaultTaskData: {\r\n            id: '',\r\n            summary: '',\r\n            assignee: '',\r\n            status: '',\r\n            project: '',\r\n            img: '',\r\n            desciption: ''\r\n        }\r\n    }\r\n};\r\n\r\nconst boardReducer = (state = defaultState, action) => produce(state, (draftState) => {\r\n    switch (action.type) {\r\n        case 'TASKBAR:UPDATE_ALL': {\r\n            Object.assign(draftState, {\r\n                taskbar: action.payload\r\n            });\r\n\r\n            break;\r\n        }\r\n        case 'TASKS:UPDATE_ALL': {\r\n            Object.assign(draftState, {\r\n                tasks: action.payload\r\n            });\r\n\r\n            break;\r\n        }\r\n        case 'TASKS:UPDATE_ITEM': {\r\n            const updateItem = draftState.tasks.find((task) => task.id === action.payload.id);\r\n\r\n            Object.assign(updateItem, action.payload);\r\n\r\n            break;\r\n        }\r\n        case 'TASKS:UPDATE_ITEM_STATUS': {\r\n            const updateItem = draftState.tasks.find((task) => task.id === action.payload.id);\r\n\r\n            Object.assign(updateItem, {\r\n                ...updateItem,\r\n                status: action.payload.status\r\n            });\r\n\r\n            break;\r\n        }\r\n        case 'TASKS:CONFIG:UPDATE': {\r\n            draftState.tasksConfig = action.payload;\r\n\r\n            break;\r\n        }\r\n        case 'FILTERS:SET': {\r\n            action.payload.forEach((filter) => {\r\n                filter.active = false;\r\n            });\r\n            Object.assign(draftState, {\r\n                filters: action.payload\r\n            });\r\n\r\n            break;\r\n        }\r\n        case 'FILTERS:SET_ACTIVE': {\r\n            const payLoadFilter = draftState.filters.find((filter) => filter.id === action.payload);\r\n\r\n            draftState.filters.forEach((filter) => {\r\n                filter.active = false;\r\n            });\r\n            payLoadFilter.active = true;\r\n\r\n            break;\r\n        }\r\n        case 'SEARCH:SET_QUERY': {\r\n            draftState.searchQuery = action.payload;\r\n\r\n            break;\r\n        }\r\n        case 'SIDEBAR:SET_VISIBILITY': {\r\n            draftState.sidebar.visible = action.payload;\r\n\r\n            break;\r\n        }\r\n        case 'SIDEBAR:SET_TASKID': {\r\n            draftState.sidebar.taskId = action.payload;\r\n\r\n            break;\r\n        }\r\n        case 'GLOBAL:UPDATE_EMPLOYEES': {\r\n            draftState.employees = action.payload;\r\n\r\n            break;\r\n        }\r\n    }\r\n});\r\n\r\nexport default boardReducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport BoardContainer from './components/Board/index';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport boardReducers from './components/Board/reducers/board';\r\n\r\nconst boardStore = createStore(\r\n    boardReducers,\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nReactDOM.render(\r\n    <Provider store={boardStore}>\r\n        <BoardContainer />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}