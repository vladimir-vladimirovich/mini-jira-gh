{"version":3,"sources":["Components/Board/Contexts/TasksContext.js","Components/Board/Components/Task/Task.js","Components/Board/Components/Task/index.js","Components/Board/Components/Taskbar/Taskbar.js","Components/Board/Components/Taskbar/index.js","Components/Board/Board.js","data/tasksData.js","config/taskbarConfig.js","utils/fakeServer.util.js","Components/Board/index.js","index.js"],"names":["TasksContext","createContext","tasks","setTasks","Task","props","className","draggable","onDragStart","id","summary","assignee","project","src","img","alt","TaskContainer","event","dataTransfer","setData","this","React","Component","Taskbar","Consumer","context","status","onDragOver","onDrop","map","task","key","TaskbarContainer","preventDefault","getData","updatedTasks","contextType","Board","taskbar","item","columnStatus","tasksData","taskbarConfig","fakeServerUtil","Promise","resolve","setTimeout","BoardContainer","newTasks","setState","state","updateTasks","updateTaskbar","getTasksData","getTaskbarConfig","newTaskbar","Provider","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.31f5bd76.chunk.js","sourcesContent":["import { createContext } from 'react';\r\n\r\nexport const TasksContext = createContext({\r\n    tasks: [],\r\n    setTasks: () => { }\r\n});","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport '../../css/Task.css';\r\n\r\nconst Task = (props) => {\r\n    return (\r\n        <div\r\n            className=\"task\"\r\n            draggable=\"true\"\r\n            onDragStart={props.onDragStart}\r\n        >\r\n            <ul className=\"list\">\r\n                <li>{props.id}</li>\r\n                <li>{props.summary}</li>\r\n                <li>{props.assignee}</li>\r\n                <li>\r\n                    <div className=\"item-status-div\">\r\n                        <p>{props.project}</p>\r\n                    </div>\r\n                </li>\r\n                <li>\r\n                    <img\r\n                        className=\"image\"\r\n                        src={props.img}\r\n                        alt=''\r\n                    />\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nTask.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    assignee: PropTypes.string.isRequired,\r\n    project: PropTypes.string.isRequired,\r\n    img: PropTypes.string,\r\n    onDragStart: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Task;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Task from './Task';\r\n\r\nclass TaskContainer extends React.Component {\r\n    onDragStart = (event) => {\r\n        event.dataTransfer.setData('taskId', this.props.id);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Task\r\n                id={this.props.id}\r\n                summary={this.props.summary}\r\n                assignee={this.props.assignee}\r\n                project={this.props.project}\r\n                img={this.props.img}\r\n                onDragStart={this.onDragStart}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nTaskContainer.propTypes = {\r\n    id: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    assignee: PropTypes.string.isRequired,\r\n    project: PropTypes.string.isRequired,\r\n    img: PropTypes.string\r\n}\r\n\r\nexport default TaskContainer;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { TasksContext } from '../../Contexts/TasksContext';\r\nimport TaskContainer from '../Task/index';\r\nimport '../../css/Taskbar.css';\r\n\r\nconst Taskbar = (props) => {\r\n    return (\r\n        <TasksContext.Consumer>\r\n            {(context) => (\r\n                <div className=\"taskbar\">\r\n                    <div className=\"taskbar-title\">\r\n                        <p>{props.status}</p>\r\n                    </div>\r\n                    <div\r\n                        className=\"taskbar-list\"\r\n                        onDragOver={props.onDragOver}\r\n                        onDrop={props.onDrop}\r\n                    >\r\n                        {context.tasks.map((task) => {\r\n                            if (task.status === props.status) {\r\n                                return (\r\n                                    <TaskContainer\r\n                                        key={task.id}\r\n                                        id={task.id}\r\n                                        summary={task.summary}\r\n                                        assignee={task.assignee}\r\n                                        status={task.status}\r\n                                        project={task.project}\r\n                                        img={task.img}\r\n                                    />\r\n                                )\r\n                            }\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TasksContext.Consumer>\r\n    );\r\n}\r\n\r\nTaskbar.propTypes = {\r\n    status: PropTypes.string.isRequired,\r\n    onDragOver: PropTypes.func.isRequired,\r\n    onDrop: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Taskbar;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { TasksContext } from '../../Contexts/TasksContext';\r\nimport '../../css/Taskbar.css';\r\nimport Taskbar from './Taskbar';\r\n\r\nclass TaskbarContainer extends React.Component {\r\n    static contextType = TasksContext;\r\n\r\n    onDragOver = (event) => {\r\n        event.preventDefault();\r\n    };\r\n\r\n    onDrop = (event) => {\r\n        const id = event.dataTransfer.getData('taskId');\r\n        const updatedTasks = this.context.tasks.map(task => {\r\n            if (task.id === id) {\r\n                task.status = this.props.status;\r\n                return task\r\n            } else return task\r\n        });\r\n        this.context.setTasks(updatedTasks);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Taskbar\r\n                onDragOver={this.onDragOver}\r\n                onDrop={this.onDrop}\r\n                status={this.props.status}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nTaskbarContainer.propTypes = {\r\n    status: PropTypes.string.isRequired\r\n}\r\n\r\nexport default TaskbarContainer;","import React from 'react';\r\nimport { TasksContext } from './Contexts/TasksContext';\r\nimport TaskbarContainer from './Components/Taskbar/index';\r\nimport './css/Board.css';\r\n\r\nconst Board = () => {\r\n    return (\r\n        <TasksContext.Consumer>\r\n            {(context) => (\r\n                <div className=\"board\">\r\n                    <div className=\"board-taskbar-container\">\r\n                        {context.taskbar.map((item) => {\r\n                            return (\r\n                                <TaskbarContainer\r\n                                    key={item.columnStatus}\r\n                                    status={item.columnStatus}\r\n                                />\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </TasksContext.Consumer>\r\n    )\r\n}\r\n\r\nexport default Board;","export const tasksData = [\r\n    {\r\n        id: 'MJ-1',\r\n        summary: 'Learn React',\r\n        assignee: 'None',\r\n        status: 'To Do',\r\n        project: 'Education',\r\n        img: 'https://image.flaticon.com/icons/svg/2731/2731461.svg'\r\n    },\r\n    {\r\n        id: 'MJ-2',\r\n        summary: 'Learn Redux',\r\n        assignee: 'Konstantin',\r\n        status: 'To Do',\r\n        project: 'Education',\r\n        img: 'https://image.flaticon.com/icons/svg/2714/2714068.svg'\r\n    },\r\n    {\r\n        id: 'MJ-3',\r\n        summary: 'Log time',\r\n        assignee: 'Diana',\r\n        status: 'To Do',\r\n        project: 'Routine',\r\n        img: 'https://image.flaticon.com/icons/svg/145/145852.svg'\r\n    },\r\n    {\r\n        id: 'MJ-4',\r\n        summary: 'Create mini-jira',\r\n        assignee: 'Artem',\r\n        status: 'To Do',\r\n        project: 'Education',\r\n        img: 'https://image.flaticon.com/icons/svg/145/145843.svg'\r\n    },\r\n    {\r\n        id: 'MJ-5',\r\n        summary: 'Feed the cat',\r\n        assignee: 'Julia',\r\n        status: 'To Do',\r\n        project: 'Ungreatful tasks',\r\n        img: 'https://image.flaticon.com/icons/svg/2741/2741163.svg'\r\n    },\r\n    {\r\n        id: 'MJ-6',\r\n        summary: 'Play games',\r\n        assignee: 'Eugene',\r\n        status: 'To Do',\r\n        project: 'Recreation',\r\n        img: 'https://image.flaticon.com/icons/svg/2741/2741111.svg'\r\n    },\r\n    {\r\n        id: 'MJ-7',\r\n        summary: 'Do sport',\r\n        assignee: 'Lera',\r\n        status: 'To Do',\r\n        project: 'Health',\r\n        img: 'https://image.flaticon.com/icons/svg/163/163802.svg'\r\n    },\r\n    {\r\n        id: 'MJ-8',\r\n        summary: 'Cook',\r\n        assignee: 'Yuri',\r\n        status: 'To Do',\r\n        project: 'Routine',\r\n        img: 'https://image.flaticon.com/icons/svg/163/163804.svg'\r\n    }\r\n];","export const taskbarConfig = [\r\n    {\r\n        columnStatus: \"To Do\"\r\n    },\r\n    {\r\n        columnStatus: \"In Progress\"\r\n    },\r\n    {\r\n        columnStatus: \"Ready for testing\"\r\n    },\r\n    {\r\n        columnStatus: \"Completed\"\r\n    }\r\n]","import { tasksData } from '../data/tasksData';\r\nimport { taskbarConfig } from '../config/taskbarConfig';\r\n\r\nclass FakeServerUtil {\r\n    constructor() {\r\n        this.tasksData = tasksData;\r\n        this.taskbarConfig = taskbarConfig;\r\n    }\r\n\r\n    // In order to emulate request/response\r\n    async getTasksData() {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                resolve(this.tasksData);\r\n            }, 2500);\r\n        })\r\n    }\r\n\r\n    // In order to emulate request/response\r\n    async getTaskbarConfig() {\r\n        return new Promise((resolve) => {\r\n            setTimeout(() => {\r\n                resolve(this.taskbarConfig);\r\n            }, 1500);\r\n        })\r\n    }\r\n}\r\n\r\nexport const fakeServerUtil = new FakeServerUtil();\r\n","import React from 'react';\r\nimport Board from './Board';\r\nimport { TasksContext } from './Contexts/TasksContext';\r\nimport { fakeServerUtil } from '../../utils/fakeServer.util';\r\n\r\nexport default class BoardContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            taskbar: [],\r\n            // [start] Reserved names by TasksContext\r\n            tasks: [],\r\n            updateTasks: this.updateTasks,\r\n            // [end] Reserved names by TasksContext\r\n            setTasks: this.setTasks\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateTasks();\r\n        this.updateTaskbar();\r\n    }\r\n\r\n    // Async tasks fetch \r\n    async updateTasks() {\r\n        const newTasks = await fakeServerUtil.getTasksData();\r\n        this.setState({ tasks: newTasks });\r\n    }\r\n\r\n    setTasks = (newTasks) => {\r\n        this.setState({ tasks: newTasks });\r\n    }\r\n\r\n    // Async columns fetch \r\n    async updateTaskbar() {\r\n        const newTaskbar = await fakeServerUtil.getTaskbarConfig();\r\n        this.setState({ taskbar: newTaskbar });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <TasksContext.Provider value={this.state}>\r\n                <Board />\r\n            </TasksContext.Provider>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport BoardContainer from './Components/Board/index';\n\nReactDOM.render(\n  <BoardContainer />,\n  document.getElementById('root')\n);"],"sourceRoot":""}